<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Workshop using the Java microservices Pet Clinic demo.(Docker based). on Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.36/en/other/wip/pet-clinic/index.html</link><description>Recent content in Workshop using the Java microservices Pet Clinic demo.(Docker based). on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.36/en/other/wip/pet-clinic/index.xml" rel="self" type="application/rss+xml"/><item><title>Preparation of the Pet Clinic application.</title><link>https://splunk.github.io/observability-workshop/v5.36/en/other/wip/pet-clinic/10-preparation/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.36/en/other/wip/pet-clinic/10-preparation/index.html</guid><description>1. Spring PetClinic Application build The first thing we need to set up is&amp;hellip; well, an application. For this exercise, we will use the Spring PetClinic application. This is a very popular sample Java application built with the Spring framework (Springboot). We are using the Micro services version of it.
First, clone the PetClinic GitHub repository, and then we will compile, build, package and containerize the application:
git clone https://github.com/hagen-p/spring-petclinic-microservices.gitChange into the spring-petclinic directory (and checkout a specific commit):</description></item><item><title>Installing the OpenTelemetry Collector</title><link>https://splunk.github.io/observability-workshop/v5.36/en/other/wip/pet-clinic/20-otel-collector/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.36/en/other/wip/pet-clinic/20-otel-collector/index.html</guid><description>1. Introduction The Splunk OpenTelemetry Collector is the core component of instrumenting infrastructure and applications. Its role is to collect and send:
Infrastructure metrics (disk, CPU, memory, etc) Application Performance Monitoring (APM) traces Profiling data Host and application logs Splunk Observability Cloud offers a wizard to walk you through the setup of the Collector on both your infrastructure and applications.
Delete any existing OpenTelemetry Collectors If you have completed a Splunk Observability workshop using this EC2 instance, please ensure you have deleted the collector running in Kubernetes before continuing.</description></item><item><title>Real User Monitoring</title><link>https://splunk.github.io/observability-workshop/v5.36/en/other/wip/pet-clinic/30-rum/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.36/en/other/wip/pet-clinic/30-rum/index.html</guid><description>1. Enable RUM For the Real User Monitoring (RUM) instrumentation, we will add the Open Telemetry Javascript https://github.com/signalfx/splunk-otel-js-web snippet in the pages, we will use the wizard again Data Management → Add Integration → RUM Instrumentation → Browser Instrumentation.
Your instructor will inform you which token to use from the dropdown, click Next. Enter App name and Environment using the following syntax:
&amp;lt;INSTANCE&amp;gt;-petclinic-service - replacing &amp;lt;INSTANCE&amp;gt; with the value you noted down earlier.</description></item><item><title>Log Observer</title><link>https://splunk.github.io/observability-workshop/v5.36/en/other/wip/pet-clinic/40-log-observer-connect/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.36/en/other/wip/pet-clinic/40-log-observer-connect/index.html</guid><description>1. Introduction For the Splunk Log Observer component, we will configure the Spring PetClinic application to write logs to a file and configure the Splunk OpenTelemetry Collector to read (tail) that log file and send the logs to Splunk Cloud.
2. OpenTelemetry Filelog Configuration We need to configure the Splunk OpenTelemetry Collector to tail the Spring PetClinic log file and send the log data to Splunk Cloud.
The Splunk OpenTelemetry Collector uses Fluentd by default but we will change the configuration to use the OpenTelemetry Filelog Receiver to consume the logs.</description></item></channel></rss>