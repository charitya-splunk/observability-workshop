<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NodeJS Workshop on Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.36/en/other/3-auto-instrumentation/nodejs/index.html</link><description>Recent content in NodeJS Workshop on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.36/en/other/3-auto-instrumentation/nodejs/index.xml" rel="self" type="application/rss+xml"/><item><title>Installing the OpenTelemetry Collector</title><link>https://splunk.github.io/observability-workshop/v5.36/en/other/3-auto-instrumentation/nodejs/1-otel-collector/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.36/en/other/3-auto-instrumentation/nodejs/1-otel-collector/index.html</guid><description>1. Introduction The Splunk OpenTelemetry Collector is the core component of instrumenting infrastructure and applications. Its role is to collect and send:
Infrastructure metrics (disk, CPU, memory, etc) Application Performance Monitoring (APM) traces Profiling data Host and application logs Splunk Observability Cloud offers a wizard to walk you through the setup of the Collector on both your infrastructure and applications.
Delete any existing OpenTelemetry Collectors If you have completed the Splunk IM workshop, please ensure you have deleted the collector running in Kubernetes before continuing.</description></item><item><title>Zero Configuration Auto Instrumentation for Java</title><link>https://splunk.github.io/observability-workshop/v5.36/en/other/3-auto-instrumentation/nodejs/2-zero-configuration/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.36/en/other/3-auto-instrumentation/nodejs/2-zero-configuration/index.html</guid><description>1. Spring PetClinic Application The first thing we need to set up APM is&amp;hellip; well, an application. For this exercise, we will use the Spring PetClinic application. This is a very popular sample Java application built with the Spring framework (Springboot).
First, clone the PetClinic GitHub repository, and then we will compile, build, package and test the application:
git clone https://github.com/spring-projects/spring-petclinicChange into the spring-petclinic directory (and checkout a specific commit):</description></item></channel></rss>