<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ninja Workshops on Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.35/en/other/index.html</link><description>Recent content in Ninja Workshops on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.35/en/other/index.xml" rel="self" type="application/rss+xml"/><item><title>PetClinic Java Workshop</title><link>https://splunk.github.io/observability-workshop/v5.35/en/other/pet-clinic/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.35/en/other/pet-clinic/index.html</guid><description>The goal is to walk through the basic steps to configure the following components of the Splunk Observability Cloud platform:
Splunk Infrastructure Monitoring (IM) Splunk Zero Configuration Auto Instrumentation for Java (APM) Database Query Performance AlwaysOn Profiling Splunk Real User Monitoring (RUM) RUM to APM Correlation Splunk Log Observer (LO) We will also show the steps about how to clone (download) a sample Java application (Spring PetClinic), as well as how to compile, package and run the application.</description></item><item><title>Getting Data In (GDI) with OTel and UF</title><link>https://splunk.github.io/observability-workshop/v5.35/en/other/gdi/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.35/en/other/gdi/index.html</guid><description>45 minutes During this technical workshop you will learn how to:
Efficiently deploy complex environments Capture metrics from these environments to Splunk Observability Cloud Auto-instrument a python application Enable OS logging to Splunk Enterprise via Universal Forwarder In order to simplify the workshop modules, a pre-configured AWS EC2 instance is provided.
By the end of this technical workshop you will have an approach to demonstrating metrics collection for complex environments and services.</description></item><item><title>Monitoring Horizontal Pod Autoscaling in Kubernetes</title><link>https://splunk.github.io/observability-workshop/v5.35/en/other/hpa/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.35/en/other/hpa/index.html</guid><description>45 minutes This workshop will equip you with the basic understanding of monitoring Kubernetes using the Splunk OpenTelemetry Collector. During the workshop you will deploy PHP/Apache and a load generator.
You will learn about OpenTelemetry Receivers, Kubernetes Namespaces, ReplicaSets, Kubernetes Horizontal Pod AutoScaling and how to monitor all this using the Splunk Observability Cloud. The main learnings from the workshop will be a better understanding of the Kubernetes Navigator (and Dashboards) in Splunk Observability Cloud as well as seeing Kubernetes metrics, events and Detectors.</description></item><item><title>Build a Distributed Trace in Lambda and Kinesis</title><link>https://splunk.github.io/observability-workshop/v5.35/en/other/lambda-kinesis/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.35/en/other/lambda-kinesis/index.html</guid><description>45 minutes This workshop will equip you with how a distributed trace is constructed for a small serverless application that runs on AWS Lambda, producing and consuming a message via AWS Kinesis.
We will see how auto-instrumentation works with manual steps to force a Producer function&amp;rsquo;s context to be sent to Consumer function via a Record put on a Kinesis stream.
For this workshop Splunk has prepared an Ubuntu Linux instance in AWS/EC2 all pre-configured for you.</description></item><item><title>Improving MTTR with Custom Tags</title><link>https://splunk.github.io/observability-workshop/v5.35/en/other/dev-mttr-custom-tags/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.35/en/other/dev-mttr-custom-tags/index.html</guid><description>45 minutes This workshop will ..
For this workshop Splunk has prepared an Ubuntu Linux instance in AWS/EC2 all pre-configured for you.
To get access to the instance that you will be using in the workshop, please visit the URL provided by the workshop leader.
Splunk Observability Cloud You must have the ability to send traces to Splunk Observability Cloud. If you do not have an account already, please start a trial here: https://www.</description></item><item><title>Splunk RUM</title><link>https://splunk.github.io/observability-workshop/v5.35/en/other/rum/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.35/en/other/rum/index.html</guid><description>Splunk RUM is the industryâ€™s only end-to-end, full-fidelity Real User Monitoring solution. It is built to optimize performance and aid in faster troubleshooting, giving you full visibility into end-user experiences.
Splunk RUM allows you to identify performance problems in your Web and or Mobile applications that impact the customer experience. We support benchmarking and measuring page performance with core web vitals. This includes but is not limited to W3C timings, the ability to identify long-running tasks, along with anything that can impact your page load.</description></item><item><title>Splunk Synthetic Scripting</title><link>https://splunk.github.io/observability-workshop/v5.35/en/other/synthetics-scripting/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.35/en/other/synthetics-scripting/index.html</guid><description>Proactively monitor the performance of your web app before problems affect your users. With Splunk Synthetic Monitoring, technical and business teams create detailed tests to proactively monitor the speed and reliability of websites, web apps, and resources over time, at any stage in the development cycle.
Splunk Synthetic Monitoring offers the most comprehensive and in-depth capabilities for uptime and web performance optimization as part of the only complete observability suite, Splunk Observability Cloud.</description></item><item><title>Splunk OnCall</title><link>https://splunk.github.io/observability-workshop/v5.35/en/other/oncall/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.35/en/other/oncall/index.html</guid><description>Aim This module is simply to ensure you have access to the Splunk On-Call UI (formerly known as VictorOps), Splunk Infrastructure Monitoring UI (formerly known as SignalFx) and the EC2 Instance which has been allocated to you.
Once you have access to each platform, keep them open for the duration of the workshop as you will be switching between them and the workshop instructions.
1. Activate your Splunk On-Call Login You should have received an invitation to Activate your Splunk On-Call account via e-mail, if you have not already done so, click the Activate Account link and follow the prompts.</description></item><item><title>Making Your Observability Cloud Native With OpenTelemetry</title><link>https://splunk.github.io/observability-workshop/v5.35/en/other/opentelemetry-collector/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.35/en/other/opentelemetry-collector/index.html</guid><description>Abstract Organizations getting started with OpenTelemetry may begin by sending data directly to an observability backend. While this works well for initial testing, using the OpenTelemetry collector as part of your observability architecture provides numerous benefits and is recommended for any production deployment.
In this workshop, we will be focusing on using the OpenTelemetry collector and starting with the fundamentals of configuring the receivers, processors, and exporters ready to use with Splunk Observability Cloud.</description></item><item><title>Ninja Workshops (Work In Progress)</title><link>https://splunk.github.io/observability-workshop/v5.35/en/other/wip/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.35/en/other/wip/index.html</guid><description>Workshop using the Java microservices Pet Clinic demo.(Docker based).The goal is to walk through the basic steps to configure the following components of the Splunk Observability Cloud platform: Splunk Infrastructure Monitoring (IM) Splunk Auto Instrumentation for Java (APM) Database Query Performance AlwaysOn Profiling Splunk Real User Monitoring (RUM) RUM to APM Correlation Splunk Log Observer (LO) We will also show the steps about how to clone (download) a sample micro services Java application (Spring PetClinic), as well as how to compile, package and run the application.</description></item></channel></rss>