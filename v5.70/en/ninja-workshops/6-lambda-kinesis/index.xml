<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Distributed Tracing for AWS Lambda Functions :: Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/6-lambda-kinesis/index.html</link><description>This workshop will enable you to build a distributed trace for a small serverless application that runs on AWS Lambda, producing and consuming a message via AWS Kinesis</description><generator>Hugo</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/6-lambda-kinesis/index.xml" rel="self" type="application/rss+xml"/><item><title>Setup</title><link>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/6-lambda-kinesis/1-setup/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/6-lambda-kinesis/1-setup/index.html</guid><description>Prerequisites Observability Workshop Instance The Observability Workshop is most often completed on a Splunk-issued and preconfigured EC2 instance running Ubuntu.
Your workshop instructor will have provided you with your credentials to access your instance. Alternatively, you can deploy a local observability workshop instance using Multipass. AWS Command Line Interface (awscli) The AWS Command Line Interface, or awscli, is an API used to interact with AWS resources. In this workshop, it is used by certain scripts to interact with the resource you’ll deploy.</description></item><item><title>Auto-Instrumentation</title><link>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/6-lambda-kinesis/2-auto-instrumentation/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/6-lambda-kinesis/2-auto-instrumentation/index.html</guid><description>The first part of our workshop will demonstrate how auto-instrumentation with OpenTelemetry allows the OpenTelemetry Collector to auto-detect what language your function is written in, and start capturing traces for those applications.
The Auto-Instrumentation Workshop Directory &amp; Contents First, let us take a look at the o11y-lambda-workshop/auto directory, and some of its files. This is where all the content for the auto-instrumentation portion of our workshop resides.
The auto Directory Run the following command to get into the o11y-lambda-workshop/auto directory:</description></item><item><title>Splunk APM, Lambda Functions &amp; Traces</title><link>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/6-lambda-kinesis/3-lambdas-in-splunk/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/6-lambda-kinesis/3-lambdas-in-splunk/index.html</guid><description>The Lambda functions should be generating a sizeable amount of trace data, which we would need to take a look at. Through the combination of environment variables and the OpenTelemetry Lambda layer configured in the resource definition for our Lambda functions, we should now be ready to view our functions and traces in Splunk APM.
View your Environment name in the Splunk APM Overview Let’s start by making sure that Splunk APM is aware of our Environment from the trace data it is receiving. This is the deployment.name we set as part of the OTEL_RESOURCE_ATTRIBUTES variable we set on our Lambda function definitions in main.tf.</description></item><item><title>Manual Instrumentation</title><link>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/6-lambda-kinesis/4-manual-instrumentation/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/6-lambda-kinesis/4-manual-instrumentation/index.html</guid><description>The second part of our workshop will focus on demonstrating how manual instrumentation with OpenTelemetry empowers us to enhance telemetry collection. More specifically, in our case, it will enable us to propagate trace context data from the producer-lambda function to the consumer-lambda function, thus enabling us to see the relationship between the two functions, even across Kinesis Stream, which currently does not support automatic context propagation.
The Manual Instrumentation Workshop Directory &amp; Contents Once again, we will first start by taking a look at our operating directory, and some of its files. This time, it will be o11y-lambda-workshop/manual directory. This is where all the content for the manual instrumentation portion of our workshop resides.</description></item><item><title>Deploying Lambda Functions &amp; Generating Trace Data</title><link>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/6-lambda-kinesis/5-redeploy-lambdas/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/6-lambda-kinesis/5-redeploy-lambdas/index.html</guid><description>Now that we know how to apply manual instrumentation to the functions and services we wish to capture trace data for, let’s go about deploying our Lambda functions again, and generating traffic against our producer-lambda endpoint.
Initialize Terraform in the manual directory Seeing as we’re in a new directory, we will need to initialize Terraform here once again.
Ensure you are in the manual directory:
pwd The expected output would be ~/o11y-lambda-workshop/manual If you are not in the manual directory, run the following command:</description></item><item><title>Splunk APM, Lambda Functions and Traces, Again!</title><link>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/6-lambda-kinesis/6-updated-lambdas/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/6-lambda-kinesis/6-updated-lambdas/index.html</guid><description>In order to see the result of our context propagation outside of the logs, we’ll once again consult the Splunk APM UI.
View your Lambda Functions in the Splunk APM Service Map Let’s take a look at the Service Map for our environment in APM once again.
In Splunk Observability Cloud:
Click on the APM Button in the Main Menu.
Select your APM Environment from the Environment: dropdown.
Click the Service Map Button on the right side of the APM Overview page. This will take you to your Service Map view.</description></item><item><title>Conclusion</title><link>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/6-lambda-kinesis/7-summary/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/6-lambda-kinesis/7-summary/index.html</guid><description>Congratulations on finishing the Lambda Tracing Workshop! You have seen how we can complement auto-instrumentation with manual steps to have the producer-lambda function’s context be sent to the consumer-lambda function via a record in a Kinesis stream. This allowed us to build the expected Distributed Trace, and to contextualize the relationship between both functions in Splunk APM.</description></item></channel></rss>