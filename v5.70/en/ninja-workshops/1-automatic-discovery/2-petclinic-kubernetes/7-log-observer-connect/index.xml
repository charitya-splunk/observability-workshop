<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Log Observer :: Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/1-automatic-discovery/2-petclinic-kubernetes/7-log-observer-connect/index.html</link><description>Up until this point, there have been no code changes, yet tracing, profiling and Database Query Performance data is being sent to Splunk Observability Cloud.
Next we will work with the Splunk Log Observer to the mix to obtain log data from the Spring PetClinic application.
The Splunk OpenTelemetry Collector automatically collects logs from the Spring PetClinic application and sends them to Splunk Observability Cloud using the OTLP exporter, annotating the log events with trace_id, span_id and trace flags.</description><generator>Hugo</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/1-automatic-discovery/2-petclinic-kubernetes/7-log-observer-connect/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuring Logback</title><link>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/1-automatic-discovery/2-petclinic-kubernetes/7-log-observer-connect/1-configure-logback/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/1-automatic-discovery/2-petclinic-kubernetes/7-log-observer-connect/1-configure-logback/index.html</guid><description>First, clone the PetClinic GitHub repository, as we will need this later in the workshop to compile, build, package and containerize the application:
cd ~ &amp;&amp; git clone https://github.com/hagen-p/spring-petclinic-microservices.git Then change into the spring-petclinic-microservices directory:
cd ~/spring-petclinic-microservices The Spring PetClinic application can be configured to use several different Java logging libraries. In this scenario, the application is using logback. To make sure we get the OpenTelemetry information in the logs we need to update a file named logback.xml with the log structure and add an OpenTelemetry dependency to the pom.xml of each of the services in the PetClinic microservices folders.</description></item><item><title>Viewing the Logs</title><link>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/1-automatic-discovery/2-petclinic-kubernetes/7-log-observer-connect/1-view-logs/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/1-automatic-discovery/2-petclinic-kubernetes/7-log-observer-connect/1-view-logs/index.html</guid><description>In order to see logs click on the Log Observer in the left-hand menu. Once in Log Observer please ensure Index on the filter bar is set to splunk4rookies-workshop.
Next, click Add Filter and search for the field deployment.environment, select your workshop instance and click = (to include). You will now see only the log messages from your PetClinic application.</description></item><item><title>Rebuild PetClinic</title><link>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/1-automatic-discovery/2-petclinic-kubernetes/7-log-observer-connect/2-rebuild-services/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/1-automatic-discovery/2-petclinic-kubernetes/7-log-observer-connect/2-rebuild-services/index.html</guid><description>Before we can build the new services with the updated log format we need to add the OpenTelemetry dependency that handles field injection to the pom.xml of our services: ​ Adding OTel dependencies Output . ~/workshop/petclinic/scripts/add_otel.sh Dependencies added successfully in spring-petclinic-admin-server Dependencies added successfully in spring-petclinic-api-gateway Dependencies added successfully in spring-petclinic-config-server Dependencies added successfully in spring-petclinic-discovery-server Dependencies added successfully in spring-petclinic-customers-service Dependencies added successfully in spring-petclinic-vets-service Dependencies added successfully in spring-petclinic-visits-service Dependency addition complete!</description></item><item><title>Related Content</title><link>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/1-automatic-discovery/2-petclinic-kubernetes/7-log-observer-connect/2-related-content/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/1-automatic-discovery/2-petclinic-kubernetes/7-log-observer-connect/2-related-content/index.html</guid><description>In the bottom pane is where any related content will be reported. In the screenshot below you can see that APM has found a trace that is related to this log line (1):
By clicking on Trace for 4be8b620a98aa938e76cf76aa1bde396 (2) will take us to the waterfall in APM for this specific trace that this log line was generated from:</description></item><item><title>Deploy to Kubernetes</title><link>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/1-automatic-discovery/2-petclinic-kubernetes/7-log-observer-connect/3-deploy/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/1-automatic-discovery/2-petclinic-kubernetes/7-log-observer-connect/3-deploy/index.html</guid><description>To see the changes in effect, we need to redeploy the services, First, let’s change the location of the images from the external repo to the local one by running the following script:
​ Change deployment to local containers Output . ~/workshop/petclinic/scripts/set_local.sh Script execution completed. Modified content saved to /home/splunk/workshop/petclinic/petclinic-local.yaml The result is a new file on disk called petclinic-local.yaml. Switch to the local versions by using the new version of the deployment YAML. First delete the old containers from the original deployment with:</description></item></channel></rss>