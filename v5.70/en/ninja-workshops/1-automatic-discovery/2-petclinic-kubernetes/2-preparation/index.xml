<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Preparation of the Workshop instance :: Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/1-automatic-discovery/2-petclinic-kubernetes/2-preparation/index.html</link><description>The instructor will provide you with the login information for the instance that we will be using during the workshop.
When you first log into your instance, you will be greeted by the Splunk Logo as shown below. If you have any issues connecting to your workshop instance then please reach out to your Instructor.
$ ssh -p 2222 splunk@&lt;ip-address> ███████╗██████╗ ██╗ ██╗ ██╗███╗ ██╗██╗ ██╗ ██╗ ██╔════╝██╔══██╗██║ ██║ ██║████╗ ██║██║ ██╔╝ ╚██╗ ███████╗██████╔╝██║ ██║ ██║██╔██╗ ██║█████╔╝ ╚██╗ ╚════██║██╔═══╝ ██║ ██║ ██║██║╚██╗██║██╔═██╗ ██╔╝ ███████║██║ ███████╗╚██████╔╝██║ ╚████║██║ ██╗ ██╔╝ ╚══════╝╚═╝ ╚══════╝ ╚═════╝ ╚═╝ ╚═══╝╚═╝ ╚═╝ ╚═╝ Last login: Mon Feb 5 11:04:54 2024 from [Redacted] Waiting for cloud-init status... Your instance is ready! splunk@show-no-config-i-0d1b29d967cb2e6ff:~$ To ensure your instance is configured correctly, we need to confirm that the required environment variables for this workshop are set correctly. In your terminal run the following script and check that the environment variables are present and set with actual valid values:</description><generator>Hugo</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/1-automatic-discovery/2-petclinic-kubernetes/2-preparation/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploy the Splunk OpenTelemetry Collector</title><link>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/1-automatic-discovery/2-petclinic-kubernetes/2-preparation/1-otel/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/1-automatic-discovery/2-petclinic-kubernetes/2-preparation/1-otel/index.html</guid><description>To get Observability signals (metrics, traces and logs) into Splunk Observability Cloud the Splunk OpenTelemetry Collector needs to be deployed into the Kubernetes cluster.
For this workshop, we will be using the Splunk OpenTelemetry Collector Helm Chart. First we need to add the Helm chart repository to Helm and update to ensure the latest version:
​ Install Helm Chart Output helm repo add splunk-otel-collector-chart https://signalfx.github.io/splunk-otel-collector-chart &amp;&amp; helm repo update Using ACCESS_TOKEN={REDACTED} Using REALM=eu0 "splunk-otel-collector-chart" has been added to your repositories Using ACCESS_TOKEN={REDACTED} Using REALM=eu0 Hang tight while we grab the latest from your chart repositories... ...Successfully got an update from the "splunk-otel-collector-chart" chart repository Update Complete. ⎈Happy Helming!⎈ Splunk Observability Cloud offers wizards in the UI to walk you through the setup of the OpenTelemetry Collector on Kubernetes, but in the interest of time, we will use the Helm install command below. Additional parameters are set to enable the operator and automatic discovery and configuration.</description></item><item><title>Deploy the PetClinic Application</title><link>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/1-automatic-discovery/2-petclinic-kubernetes/2-preparation/2-petclinic/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.70/en/ninja-workshops/1-automatic-discovery/2-petclinic-kubernetes/2-preparation/2-petclinic/index.html</guid><description>The first deployment of the application will be using prebuilt containers to give the base scenario: a regular Java microservices-based application running in Kubernetes that we want to start observing. So let’s deploy the application:
​ kubectl apply Output kubectl apply -f ~/workshop/petclinic/petclinic-deploy.yaml deployment.apps/config-server created service/config-server created deployment.apps/discovery-server created service/discovery-server created deployment.apps/api-gateway created service/api-gateway created service/api-gateway-external created deployment.apps/customers-service created service/customers-service created deployment.apps/vets-service created service/vets-service created deployment.apps/visits-service created service/visits-service created deployment.apps/admin-server created service/admin-server created service/petclinic-db created deployment.apps/petclinic-db created configmap/petclinic-db-initdb-config created deployment.apps/petclinic-loadgen-deployment created configmap/scriptfile created At this point, we can verify the deployment by checking that the Pods are running. The containers need to be downloaded and started so this may take a couple of minutes.</description></item></channel></rss>