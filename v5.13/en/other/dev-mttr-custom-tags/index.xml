<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Improving MTTR with Custom Tags on Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.13/en/other/dev-mttr-custom-tags/index.html</link><description>Recent content in Improving MTTR with Custom Tags on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://splunk.github.io/observability-workshop/v5.13/en/other/dev-mttr-custom-tags/index.xml" rel="self" type="application/rss+xml"/><item><title>Setting up your AWS Instance</title><link>https://splunk.github.io/observability-workshop/v5.13/en/other/dev-mttr-custom-tags/1-setup-os/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.13/en/other/dev-mttr-custom-tags/1-setup-os/index.html</guid><description>Environment Setup - Mac Note If you wish to run this on Mac directly, you can see the instructions here in the appendix and skip the next section on Linux.
All installs must continue at setting up the app.
Environment Setup - Linux You can skip past the EC2 configuration to Linux Software Requirements if you already have an Ec2 that meets the specifications below !!!!
ubuntu 22.04 Security Group Security Settings HTTP inbound open on 8010 All Traffic open outbound Linux Software Requirements: docker, docker-compose, git, maven sudo apt update sudo apt upgrade sudo apt install docker docker-compose maven</description></item><item><title>Setting up your Application</title><link>https://splunk.github.io/observability-workshop/v5.13/en/other/dev-mttr-custom-tags/2-setup-app/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.13/en/other/dev-mttr-custom-tags/2-setup-app/index.html</guid><description>Environment Setup - Application Clone the workshop repository: git clone -b tko-fy24-distributed-tracing https://github.com/shabuhabs/javashop-otel.git Access the workshop directory: cd javashop-otel Set Environment Variables nano .env Note NO spaces in &amp;lt;your_name&amp;gt; The shop_user provides us an Environment Tag. To get your access token, go to your Splunk O11y UI -&amp;gt; Settings -&amp;gt;Access Tokens. It is assumed in this workshop that you can send traces to the org and token you are using. Set the following values: SHOP_USER=&amp;lt;your_name&amp;gt; SPLUNK_ACCESS_TOKEN=&amp;lt;your_token&amp;gt; SPLUNK_REALM=&amp;lt;your_realm&amp;gt; Save in nano with [CTRL]-o [ENTER] Exit nano with [CTRL]-x Build and Deploy Application Let&amp;rsquo;s get started by building and deploying our Application, the Splunk Instrument Shop.</description></item><item><title>Overview of the Workshop</title><link>https://splunk.github.io/observability-workshop/v5.13/en/other/dev-mttr-custom-tags/3-overview/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.13/en/other/dev-mttr-custom-tags/3-overview/index.html</guid><description>Users and Workflows As we go through this workshop we will be switching roles from SRE to Developer. First we will start with alert responders or SREs who will identify an issue in Splunk Observability UI. Next, we will jump to a Developer Role to see how a Developer will debug and repair/fix a software problem using trace data provided by our SRE.
Of course, we are not requiring 2 people for this workshop as each participant will play both roles.</description></item><item><title>Review APM in the UI</title><link>https://splunk.github.io/observability-workshop/v5.13/en/other/dev-mttr-custom-tags/4-review-apm/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.13/en/other/dev-mttr-custom-tags/4-review-apm/index.html</guid><description>View Service Map Next step is open your Observability UI, accessing the proper org ( where you sent the traces to ) and click APM and Access the Environemnnt that matches the username you put in .env.
Please note it may take 4-5 minutes or more for traces to show up and you will see full map &amp;ldquo;form&amp;rdquo; as traces are coming in, so you may have to refresh the page a few times each time we Build and Deploy.</description></item><item><title>Debugging 101</title><link>https://splunk.github.io/observability-workshop/v5.13/en/other/dev-mttr-custom-tags/5-debugging101/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.13/en/other/dev-mttr-custom-tags/5-debugging101/index.html</guid><description>Now let&amp;rsquo;s play the role of the developer As a developer we must debug the function products:ProductResource.getAllProducts to find the problem.
Debugging 101, the Line by Line method Without anything to go on other than &amp;ldquo;BAD FUNCTION&amp;rdquo;, a Developer must then look at code visually line by line to find and fix the problem. To make this worse, functions call other functions, and it can get very messy in bad code scenarios.</description></item><item><title>Custom Tags</title><link>https://splunk.github.io/observability-workshop/v5.13/en/other/dev-mttr-custom-tags/6-custom-tags/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.13/en/other/dev-mttr-custom-tags/6-custom-tags/index.html</guid><description>Custom Attribution (Custom Tags) To take a deeper look at this issue and make this much easier to debug we will implement Custom Attributes via Opentelemetry Manual Instrumentation.
To speed up manual instrumentation in Java you can leverage OpenTelemetry Annotations, which automatically create a span around a method without modifying the actual code inside the method. This can be very valuable if you are working with an SRE that may have limited access to source code changes.</description></item><item><title>Fixing Code</title><link>https://splunk.github.io/observability-workshop/v5.13/en/other/dev-mttr-custom-tags/7-fixing-code/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.13/en/other/dev-mttr-custom-tags/7-fixing-code/index.html</guid><description>Finding the Problem How did we get here? How did the 999 end up in the trace as a Custom Attribute?
Take a look at the function signature
private void myCoolFunction234234234(@SpanAttribute(&amp;#34;myInt&amp;#34;) int myInt)@SpanAttribute(&amp;quot;myint&amp;quot;) is an OpenTelemetry Annotation that was added by our Java Otel Annotator tool.
Fixing the code Change this: private void myCoolFunction234234234(@SpanAttribute(&amp;#34;myInt&amp;#34;) int myInt) { // Generate a FAST sleep of 0 time ! Random sleepy = new Random(); try{ if (999==myInt) Thread.</description></item><item><title>Rebuild and Deploy</title><link>https://splunk.github.io/observability-workshop/v5.13/en/other/dev-mttr-custom-tags/8-rebuild-and-deploy/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.13/en/other/dev-mttr-custom-tags/8-rebuild-and-deploy/index.html</guid><description>Rebuild and Deploy Run ./BuildAndDeploy.sh Wait a few minutes . . . Return to the service map If you do NOT see RED in your service map, you have completed the Latency Repair for the Colorado Location!
Now let&amp;rsquo;s check for our exception in the traces.
Click on shop service Click Traces (on the right side) Click Errors Only If you do not have red in your service map and you do not see Errors in traces, you have successfully completed our Inventory application review for Sri Lanka and Colorado locations.</description></item><item><title>Don't Forget Chicago</title><link>https://splunk.github.io/observability-workshop/v5.13/en/other/dev-mttr-custom-tags/9-chicago/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.13/en/other/dev-mttr-custom-tags/9-chicago/index.html</guid><description>Don&amp;rsquo;t forget Chicago We are nearly done, one more location to go&amp;hellip; Chicago.
Since we have been having so many issues related to &amp;ldquo;location&amp;rdquo; and we have added that custom attribute via Opentelemetry Manual Instrumentation, lets go to the Splunk Observability UI and look at an APM metric set around that tag that I created for us.
Open a browser and navigate to http://[EC2-Address]:8010 Replace [EC2-Address] with the ip address of your host Select a few locations and hit the Login button.</description></item><item><title>Appendix - Setting up on Mac</title><link>https://splunk.github.io/observability-workshop/v5.13/en/other/dev-mttr-custom-tags/appendix-a-setup-mac/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.13/en/other/dev-mttr-custom-tags/appendix-a-setup-mac/index.html</guid><description>Mac Setup Tested on Macos Ventura 13.2.1 Mac M1/M2 Intel Macs should be work; however if they are slower you may need to run ./BuildAndDeploy multiple times.
IMPORTANT: Docker must have access to 6-GB RAM.
Prerequisites XCode Command line tools Homebrew Install Homebrew full install details mkdir homebrew &amp;amp;&amp;amp; curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C homebrew eval &amp;#34;$(homebrew/bin/brew shellenv)&amp;#34; brew update --force --quiet chmod -R go-w &amp;#34;$(brew --prefix)/share/zsh&amp;#34;Install Colima Colima - Colima is a docker daemon that does not require Docker Desktop.</description></item></channel></rss>