<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenTelemetry Collector レシーバー on Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.42/ja/other/opentelemetry-collector/3-receivers/index.html</link><description>Recent content in OpenTelemetry Collector レシーバー on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><language>ja</language><atom:link href="https://splunk.github.io/observability-workshop/v5.42/ja/other/opentelemetry-collector/3-receivers/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenTelemetry Collector レシーバー</title><link>https://splunk.github.io/observability-workshop/v5.42/ja/other/opentelemetry-collector/3-receivers/1-hostmetrics/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.42/ja/other/opentelemetry-collector/3-receivers/1-hostmetrics/index.html</guid><description>Host Metrics レシーバー Host Metrics レシーバー は、さまざまなソースからスクレイピングされたホストシステムに関するメトリクスを生成します。これは、コレクターがエージェントとしてデプロイされるときに使用さます。
etc/otel-contrib/config.yaml ファイルを更新して、hostmetrics レシーバーを設定してみましょう。以下の YAML を receivers セクションの下に挿入します。
sudo vi /etc/otelcol-contrib/config.yaml Tips: vi or nano vi/vimの操作に慣れていない場合は、nano もお試しいただくと良いかもしれません。nanoはLinux環境でよく使われる、シンプルなエディタの一つです。
sudo nano /etc/otelcol-contrib/config.yaml Alt-U で、アンドゥができます。Macの場合は Esc キーを押したあとに U を押してください！ ctrl-_ のあとに数字を入力すると、指定した行数にジャンプします。 ctrl-O のあとに Enter で、ファイルを保存します。 ctrl-X で、nanoを終了します。 &amp;#8203; Host Metrics Receiver Configuration receivers: hostmetrics: collection_interval: 10s scrapers: # CPU utilization metrics cpu: # Disk I/O metrics disk: # File System utilization metrics filesystem: # Memory utilization metrics memory: # Network interface I/O metrics &amp;amp; TCP connection metrics network: # CPU load metrics load: # Paging/Swap space utilization and I/O metrics paging: # Process count metrics processes: # Per process CPU, Memory and Disk I/O metrics.</description></item><item><title>OpenTelemetry Collector レシーバー</title><link>https://splunk.github.io/observability-workshop/v5.42/ja/other/opentelemetry-collector/3-receivers/2-prometheus/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.42/ja/other/opentelemetry-collector/3-receivers/2-prometheus/index.html</guid><description>Prometheus レシーバー Prometheus のレシーバーも、もちろんあります。Prometheus は OpenTelemetry Collector で使われているオープンソースのツールキットです。このレシーバーは、OpenTelemetry Collector 自身からメトリクスをスクレイピングするためにも使われます。これらのメトリクスは、コレクタの健全性をモニタリングするために使用できる。
ここでは、prometheus レシーバーを変更して、コレクター自身からメトリクスを収集できるようにしてみます。レシーバーの名前を prometheus から prometheus/internal に変更して、レシーバーが何をしているのかをより明確しましょう。設定ファイルを以下のように更新します：
&amp;#8203; Prometheus Receiver Configuration prometheus/internal: config: scrape_configs: - job_name: &amp;#39;otel-collector&amp;#39; scrape_interval: 10s static_configs: - targets: [&amp;#39;0.0.0.0:8888&amp;#39;] 上記の設定では、OpenTelemetry Collector 自身が公開している Prometheus エンドポイントをスクレイピングしています。どのような情報が得られるか、curl コマンドで試すことができます:
curl http://localhost:8888/metrics Tips: コンポーネントに名前をつける レシーバー、プロセッサー、エクスポーター、パイプラインなどのコンポーネントは、 otlp や otlp/2 のように、 type[/name] 形式に従った識別子によって定義されます。識別子が一意である限り、与えられたタイプのコンポーネントを複数回定義することができるようになります。
ここでは prometheus/internal という識別子でこのコンポーネントを特定できるようにしたので、別の prometheus レシーバーを追加して、監視対象インスタンスの Prometheus エンドポイントをスクレイピングさせることもできます。
ダッシュボード例 - Prometheus メトリクス このスクリーンショットは、 prometheus/internal レシーバーが OpenTelemetry Collector から収集したメトリクスの、spmeのダッシュボードの例です。ここではスパン・メトリクス・ログの、それぞれの受信および送信の様子を見ることができます。
メモ このダッシュボードはSplunk Observability Cloud にある組み込みダッシュボードで、Splunk OpenTelemetry Collector のインストールの状況を簡単にモニタリングできます。</description></item><item><title>OpenTelemetry Collector レシーバー</title><link>https://splunk.github.io/observability-workshop/v5.42/ja/other/opentelemetry-collector/3-receivers/3-other-receivers/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.42/ja/other/opentelemetry-collector/3-receivers/3-other-receivers/index.html</guid><description>その他のレシーバー デフォルトの設定には、他のレシーバーがあることに気づくはずです。 otlp、opencensus、jaeger、zipkin が定義されています。これらは他のソースからテレメトリーデータを受信するために使われます。このワークショップでは、これらのレシーバーについては取り上げませんので、そのままにしておきましょう。
Ninja: レシーバーを動的に生成する dockerコンテナ、kubernetesポッド、sshセッションのような短時間のタスクを観測するために、receiver creator レシーバーと observer エクステンションを使って、対象のサービスが起動するタイミングで新しいレシーバーを作成することができます。
何が必要なの？ receiver creator とそれに関連する observer エクステンションの使用を開始するには、collector build manifest に追加する必要があります。
詳細は installation を参照してください。
注意事項はある？ 短命なタスクの中には、username や password のような追加設定を必要とするものがあります。それらの値は環境変数 を参照したり、 ${file:./path/to/database/password} のようなスキーム展開構文を使うこともできます。
組織における機密情報の取り扱い規定に従って、どのような方法を取るかを検討してください。
Ninja ゾーン この Ninja ゾーンに必要なものは2つだけです:
builder manifestに、 receiver creator レシーバーと observer エクステンションを追加する 検出されたエンドポイントを検出するように、設定を作成する 次のようにすると、設定をテンプレート化できます:
receiver_creator: watch_observers: [host_observer] receivers: redis: rule: type == &amp;#34;port&amp;#34; &amp;amp;&amp;amp; port == 6379 config: password: ${env:HOST_REDIS_PASSWORD}他の例は receiver creator&amp;rsquo;s examples にあります。
設定を確認しましょう これで、レシーバーをカバーできました。ここで、設定のの変更内容をチェックしてみましょう。
Check-in設定をレビューしてください &amp;#8203; config.</description></item></channel></rss>