<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Auto-Instrumentation Workshops on Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.42/en/other/3-auto-instrumentation/index.html</link><description>Recent content in Auto-Instrumentation Workshops on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.42/en/other/3-auto-instrumentation/index.xml" rel="self" type="application/rss+xml"/><item><title>PetClinic Java Workshop (Monolith)</title><link>https://splunk.github.io/observability-workshop/v5.42/en/other/3-auto-instrumentation/1-java-monolith/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.42/en/other/3-auto-instrumentation/1-java-monolith/index.html</guid><description>The goal is to walk through the basic steps to configure the following components of the Splunk Observability Cloud platform:
Splunk Infrastructure Monitoring (IM) Splunk Zero Configuration Auto Instrumentation for Java (APM) Database Query Performance AlwaysOn Profiling Splunk Real User Monitoring (RUM) RUM to APM Correlation Splunk Log Observer (LO) We will also show the steps about how to clone (download) a sample Java application (Spring PetClinic), as well as how to compile, package and run the application.</description></item><item><title>NodeJS Zero-Config Workshop</title><link>https://splunk.github.io/observability-workshop/v5.42/en/other/3-auto-instrumentation/2-nodejs/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.42/en/other/3-auto-instrumentation/2-nodejs/index.html</guid><description>30 minutes AuthorRobert Castley
The goal is to walk through the basic steps to configure the following components of the Splunk Observability Cloud platform:
Splunk Infrastructure Monitoring (IM) Splunk Zero Configuration Auto Instrumentation for NodeJS (APM) AlwaysOn Profiling Splunk Log Observer (LO) We will deploy the OpenTelemetry Astronomy Shop application in Kubernetes, which contains two NodeJS services (Frontend &amp;amp; Payment Service). Once the application and the OpenTelemetry Connector are up and running, we will start seeing metrics, traces and logs via the Zero Configuration Auto Instrumentation for NodeJS that will be used by the Splunk Observability Cloud platform to provide insights into the application.</description></item><item><title>Workshop using the Java microservices Pet Clinic demo (Kubernetes-based).</title><link>https://splunk.github.io/observability-workshop/v5.42/en/other/3-auto-instrumentation/3-java-microservices-k8s/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.42/en/other/3-auto-instrumentation/3-java-microservices-k8s/index.html</guid><description>The goal of this workshop is to introduce the features of Splunk&amp;rsquo;s Opentelemetry Java Auto instrumentation. First, we create the workshop scenario, by installing a simple Java microservices application in Kubernetes. We then walk through the basic steps to set up the OpenTelemetry Collector in Kubernetes and enable auto-instrumentation on the existing Java application running in Kubernetes. This will start sending Opentelemetry signals to the Splunk Observability Cloud platform and enable the following components:</description></item></channel></rss>