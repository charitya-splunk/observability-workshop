<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Workshop using the Java microservices Pet Clinic demo (Kubernetes-based). on Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.46/en/other/3-auto-instrumentation/3-java-microservices-k8s/index.html</link><description>Recent content in Workshop using the Java microservices Pet Clinic demo (Kubernetes-based). on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.46/en/other/3-auto-instrumentation/3-java-microservices-k8s/index.xml" rel="self" type="application/rss+xml"/><item><title>Preparation of the Pet Clinic application.</title><link>https://splunk.github.io/observability-workshop/v5.46/en/other/3-auto-instrumentation/3-java-microservices-k8s/10-preparation/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.46/en/other/3-auto-instrumentation/3-java-microservices-k8s/10-preparation/index.html</guid><description>1. Validate the settings for your workshop The instructor will provide you with the login information for the instance that we will be using during the workshop. When you first log into your instance, you will be greeted by the Splunk Logo as shown below:
❯ ssh -p 2222 splunk@[IP-ADDRESS] ███████╗██████╗ ██╗ ██╗ ██╗███╗ ██╗██╗ ██╗ ██╗ ██╔════╝██╔══██╗██║ ██║ ██║████╗ ██║██║ ██╔╝ ╚██╗ ███████╗██████╔╝██║ ██║ ██║██╔██╗ ██║█████╔╝ ╚██╗ ╚════██║██╔═══╝ ██║ ██║ ██║██║╚██╗██║██╔═██╗ ██╔╝ ███████║██║ ███████╗╚██████╔╝██║ ╚████║██║ ██╗ ██╔╝ ╚══════╝╚═╝ ╚══════╝ ╚═════╝ ╚═╝ ╚═══╝╚═╝ ╚═╝ ╚═╝ Last login: Mon Feb 5 11:04:54 2024 from [Redacted] Waiting for cloud-init status.</description></item><item><title>Verifying both Kubernetes and the PetClinic Microservices application</title><link>https://splunk.github.io/observability-workshop/v5.46/en/other/3-auto-instrumentation/3-java-microservices-k8s/20-verify-setup/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.46/en/other/3-auto-instrumentation/3-java-microservices-k8s/20-verify-setup/index.html</guid><description>1. Verify the installation by checking Metrics and Logs Once the installation is completed, you can log in to the Splunk Observability Cloud with the URL provided by the Instructor.
First, Navigate to the Kubernetes Navigator view in the Infrastructure section to see the metrics from your cluster in the K8s nodes pane. Once you are in the Kubernetes Navigator view, change the Time filter to the last 15 Minutes (-15m) to focus on the latest data.</description></item><item><title>Setting up Zero configuration Auto instrumentation for APM</title><link>https://splunk.github.io/observability-workshop/v5.46/en/other/3-auto-instrumentation/3-java-microservices-k8s/30-auto-instrumentation/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.46/en/other/3-auto-instrumentation/3-java-microservices-k8s/30-auto-instrumentation/index.html</guid><description>1. Introduction In the previous chapter, we enabled the OpenTelemetry Collector for Kubernetes on our cluster and configured it to send metrics both Kubernetes and Mysql metrics to the Splunk Observability Cloud. The next section will enable auto-instrumentation for our Java apps running in the pods in our cluster.
Zero Config Auto Instrumentation It is important to understand that Zero Config Auto instrumentation is designed to get Trace/Span &amp;amp; Profiling data out of your existing application, without requiring you to change your code or requiring to rebuild.</description></item><item><title>Splunk APM features available with Zero Config Auto-Instrumentation</title><link>https://splunk.github.io/observability-workshop/v5.46/en/other/3-auto-instrumentation/3-java-microservices-k8s/40-traces-spans-tags/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.46/en/other/3-auto-instrumentation/3-java-microservices-k8s/40-traces-spans-tags/index.html</guid><description>1. Introduction As we have seen in the previous chapter, once you have enabled Zero Config Auto Instrumentation and started to run invocations though your application, traces will be send to Splunk Observability Cloud Suite With these Traces we Splunk will automatically generate Dependency maps and RED Metrics. In this next section we are going to examine the traces itself and what information they provide to help you understand the behaviour of your services all without touching your code.</description></item><item><title>Splunk APM Always-on Profiling &amp; Database Query Performance</title><link>https://splunk.github.io/observability-workshop/v5.46/en/other/3-auto-instrumentation/3-java-microservices-k8s/50-profiling-db-query/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.46/en/other/3-auto-instrumentation/3-java-microservices-k8s/50-profiling-db-query/index.html</guid><description>1. Introduction As we have seen in the previous chapter, you can trace your interactions between the various services using APM without touching your code, which will allow you to identify issues faster. However as seen, besides tracing, Splunk Zero Config for Auto-Instrumentations offers additional features out of the box that can help you finding issues faster. In this section we are going to look at 2 of them:
Always-on Profiling and Java Metrics Database Query Performance If you want to dive deeper into Always-on Profiling or DB-Query performance, we have a separate Ninja Workshop called Debug Problems that you can follow for more detailed info.</description></item><item><title>Log Observer</title><link>https://splunk.github.io/observability-workshop/v5.46/en/other/3-auto-instrumentation/3-java-microservices-k8s/60-log-observer-connect/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.46/en/other/3-auto-instrumentation/3-java-microservices-k8s/60-log-observer-connect/index.html</guid><description>1. Introduction Until this point, we have not touched or changed our code, yet we did receive Trace &amp;amp; Profiling/DB Query performance information. If we want to get more out of our Java application, we can introduce a small change to our application log setup.
This change will configure the Spring PetClinic application to use an Otel-based format to write logs, This will allow the (Auto)-instrumentation to add Otel relevant information into the logs.</description></item><item><title>Real User Monitoring</title><link>https://splunk.github.io/observability-workshop/v5.46/en/other/3-auto-instrumentation/3-java-microservices-k8s/70-rum/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.46/en/other/3-auto-instrumentation/3-java-microservices-k8s/70-rum/index.html</guid><description>1. Enable RUM For the Real User Monitoring (RUM) instrumentation, we will add the Open Telemetry Javascript https://github.com/signalfx/splunk-otel-js-web snippet in the pages, we will use the wizard again Data Management → Add Integration → RUM Instrumentation → Browser Instrumentation.
Your instructor will inform you which token to use from the dropdown, click Next. Enter App name and Environment using the following syntax:
&amp;lt;INSTANCE&amp;gt;-petclinic-service - replacing &amp;lt;INSTANCE&amp;gt; with the value you noted down earlier.</description></item></channel></rss>