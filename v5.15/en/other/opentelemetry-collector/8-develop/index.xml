<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenTelemetry Collector Development on Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.15/en/other/opentelemetry-collector/8-develop/index.html</link><description>Recent content in OpenTelemetry Collector Development on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.15/en/other/opentelemetry-collector/8-develop/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenTelemetry Collector Development</title><link>https://splunk.github.io/observability-workshop/v5.15/en/other/opentelemetry-collector/8-develop/1-project-setup/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.15/en/other/opentelemetry-collector/8-develop/1-project-setup/index.html</guid><description>Project Setup Ninja Note The time to finish this section of the workshop can vary depending on experience.
A complete solution can be found here incase you&amp;rsquo;re stuck or want to follow along with the instructor.
To get started developing a the new Jenkins CI receiver, we first need to set up a Golang project. The steps to create your new Golang project is:
Create a new directoy named ${HOME}/go/src/jenkinscireceiver and change into it The actual directory name or location is not strict, you can choose your own development directory to make it in.</description></item><item><title>OpenTelemetry Collector Development</title><link>https://splunk.github.io/observability-workshop/v5.15/en/other/opentelemetry-collector/8-develop/2-configuration/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.15/en/other/opentelemetry-collector/8-develop/2-configuration/index.html</guid><description>Building The Configuration The configuration portion of the component is how the user is able to have their inputs over the component, so the values that is used for the configuration need to be:
Intuitive for users to understand what that field controls Be explicit in what is required and what is optional Reuse common names and fields Keep the options simple &amp;#8203; bad config good config --- jenkins_server_addr: hostname jenkins_server_api_port: 8089 interval: 10m filter_builds_by: - name: my-awesome-build status: amber track: values: example.</description></item><item><title>OpenTelemetry Collector Development</title><link>https://splunk.github.io/observability-workshop/v5.15/en/other/opentelemetry-collector/8-develop/3-component/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.15/en/other/opentelemetry-collector/8-develop/3-component/index.html</guid><description>Component Review To recap the type of component we will need to in order to capture metrics from Jenkins:
&amp;#8203; Extension Receiver Processor Exporter Ninja: Connectors The business use case an extension helps solves for are:
Having shared functionality that requires runtime configuration Indirectly helps with observing the runtime of the collector See Extensions Overview for more details.
The business use case a receiver solves for:
Fetching data from a remote source Receiving data from remote source(s) This are commonly referred to pull vs push based data collection, and you read more about the details in the Receiver Overview.</description></item><item><title>OpenTelemetry Collector Development</title><link>https://splunk.github.io/observability-workshop/v5.15/en/other/opentelemetry-collector/8-develop/4-design/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.15/en/other/opentelemetry-collector/8-develop/4-design/index.html</guid><description>Designing The Metrics To help define and export the metrics captured by our receiver, we will be using, mdatagen, a tool developed for the collector that turns yaml defined metrics into code.
&amp;#8203; metadata.yaml gen.go --- # Type defines the name to reference the component # in the configuration file type: jenkins # Status defines the component type and the stability level status: class: receiver stability: development: [metrics] # Attributes are the expected fields reported # with the exported values.</description></item><item><title>OpenTelemetry Collector Development</title><link>https://splunk.github.io/observability-workshop/v5.15/en/other/opentelemetry-collector/8-develop/5-business-logic/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.15/en/other/opentelemetry-collector/8-develop/5-business-logic/index.html</guid><description>Building The Business Logic At this point, we have a custom component that currently does nothing so we need to add in the required logic to capture this data from Jenkins.
From this point, the steps that we need to take are:
Create a client that connect to Jenkins Capture all the configured jobs Report the status of the last build for the configured job Calculate the time difference between commit timestamp and job completion.</description></item></channel></rss>