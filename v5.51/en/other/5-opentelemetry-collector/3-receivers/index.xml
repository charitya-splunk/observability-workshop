<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenTelemetry Collector Receivers on Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.51/en/other/5-opentelemetry-collector/3-receivers/index.html</link><description>Recent content in OpenTelemetry Collector Receivers on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.51/en/other/5-opentelemetry-collector/3-receivers/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenTelemetry Collector Receivers</title><link>https://splunk.github.io/observability-workshop/v5.51/en/other/5-opentelemetry-collector/3-receivers/1-hostmetrics/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.51/en/other/5-opentelemetry-collector/3-receivers/1-hostmetrics/index.html</guid><description>Host Metrics Receiver The Host Metrics Receiver generates metrics about the host system scraped from various sources. This is intended to be used when the collector is deployed as an agent which is what we will be doing in this workshop.
Let&amp;rsquo;s update the /etc/otel-contrib/config.yaml file and configure the hostmetrics receiver. Insert the following YAML under the receivers section, taking care to indent by two spaces.
sudo vi /etc/otelcol-contrib/config.yaml &amp;#8203; Host Metrics Receiver Configuration receivers: hostmetrics: collection_interval: 10s scrapers: # CPU utilization metrics cpu: # Disk I/O metrics disk: # File System utilization metrics filesystem: # Memory utilization metrics memory: # Network interface I/O metrics &amp;amp; TCP connection metrics network: # CPU load metrics load: # Paging/Swap space utilization and I/O metrics paging: # Process count metrics processes: # Per process CPU, Memory and Disk I/O metrics.</description></item><item><title>OpenTelemetry Collector Receivers</title><link>https://splunk.github.io/observability-workshop/v5.51/en/other/5-opentelemetry-collector/3-receivers/2-prometheus/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.51/en/other/5-opentelemetry-collector/3-receivers/2-prometheus/index.html</guid><description>Prometheus Receiver You will also notice another receiver called prometheus. Prometheus is an open-source toolkit used by the OpenTelemetry Collector. This receiver is used to scrape metrics from the OpenTelemetry Collector itself. These metrics can then be used to monitor the health of the collector.
Let&amp;rsquo;s modify the prometheus receiver to clearly show that it is for collecting metrics from the collector itself. By changing the name of the receiver from prometheus to prometheus/internal, it is now much clearer as to what that receiver is doing.</description></item><item><title>OpenTelemetry Collector Receivers</title><link>https://splunk.github.io/observability-workshop/v5.51/en/other/5-opentelemetry-collector/3-receivers/3-other-receivers/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.51/en/other/5-opentelemetry-collector/3-receivers/3-other-receivers/index.html</guid><description>Other Receivers You will notice in the default configuration there are other receivers: otlp, opencensus, jaeger and zipkin. These are used to receive telemetry data from other sources. We will not be covering these receivers in this workshop and they can be left as they are.
Ninja: Create receivers dynamically To help observe short lived tasks like docker containers, kubernetes pods, or ssh sessions, we can use the receiver creator with observer extensions to create a new receiver as these services start up.</description></item></channel></rss>