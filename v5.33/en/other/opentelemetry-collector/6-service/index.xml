<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenTelemetry Collector Service on Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.33/en/other/opentelemetry-collector/6-service/index.html</link><description>Recent content in OpenTelemetry Collector Service on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.33/en/other/opentelemetry-collector/6-service/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenTelemetry Collector Service</title><link>https://splunk.github.io/observability-workshop/v5.33/en/other/opentelemetry-collector/6-service/1-hostmetrics/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.33/en/other/opentelemetry-collector/6-service/1-hostmetrics/index.html</guid><description>Hostmetrics Receiver If you recall from the Receivers portion of the workshop, we defined the Host Metrics Receiver to generate metrics about the host system, which are scraped from various sources. To enable the receiver, we must include the hostmetrics receiver in the metrics pipeline.
In the metrics pipeline, add hostmetrics to the metrics receivers section.
service: pipelines: traces: receivers: [otlp, opencensus, jaeger, zipkin] processors: [batch] exporters: [logging] metrics: receivers: [hostmetrics, otlp, opencensus, prometheus] processors: [batch] exporters: [logging]</description></item><item><title>OpenTelemetry Collector Service</title><link>https://splunk.github.io/observability-workshop/v5.33/en/other/opentelemetry-collector/6-service/2-prometheus/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.33/en/other/opentelemetry-collector/6-service/2-prometheus/index.html</guid><description>Prometheus Internal Receiver Earlier in the workshop, we also renamed the prometheus receiver to reflect that is was collecting metrics internal to the collector, renaming it to prometheus/internal.
We now need to enable the prometheus/internal receiver under the metrics pipeline. Update the receivers section to include prometheus/internal under the metrics pipeline:
service: pipelines: traces: receivers: [otlp, opencensus, jaeger, zipkin] processors: [batch] exporters: [logging] metrics: receivers: [hostmetrics, otlp, opencensus, prometheus/internal] processors: [batch] exporters: [logging]</description></item><item><title>OpenTelemetry Collector Service</title><link>https://splunk.github.io/observability-workshop/v5.33/en/other/opentelemetry-collector/6-service/3-resourcedetection/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.33/en/other/opentelemetry-collector/6-service/3-resourcedetection/index.html</guid><description>Resource Detection Processor We also added resourcedetection/system and resourcedetection/ec2 processors so that the collector can capture the instance hostname and AWS/EC2 metadata. We now need to enable these two processors under the metrics pipeline.
Update the processors section to include resourcedetection/system and resourcedetection/ec2 under the metrics pipeline:
service: pipelines: traces: receivers: [otlp, opencensus, jaeger, zipkin] processors: [batch] exporters: [logging] metrics: receivers: [hostmetrics, otlp, opencensus, prometheus/internal] processors: [batch, resourcedetection/system, resourcedetection/ec2] exporters: [logging]</description></item><item><title>OpenTelemetry Collector Service</title><link>https://splunk.github.io/observability-workshop/v5.33/en/other/opentelemetry-collector/6-service/4-attributes/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.33/en/other/opentelemetry-collector/6-service/4-attributes/index.html</guid><description>Attributes Processor Also in the Processors section of this workshop, we added the attributes/conf processor so that the collector will insert a new attribute called participant.name to all the metrics. We now need to enable this under the metrics pipeline.
Update the processors section to include attributes/conf under the metrics pipeline:
service: pipelines: traces: receivers: [otlp, opencensus, jaeger, zipkin] processors: [batch] exporters: [logging] metrics: receivers: [hostmetrics, otlp, opencensus, prometheus/internal] processors: [batch, resourcedetection/system, resourcedetection/ec2, attributes/conf] exporters: [logging]</description></item><item><title>OpenTelemetry Collector Service</title><link>https://splunk.github.io/observability-workshop/v5.33/en/other/opentelemetry-collector/6-service/5-otlphttp/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.33/en/other/opentelemetry-collector/6-service/5-otlphttp/index.html</guid><description>OTLP HTTP Exporter In the Exporters section of the workshop, we configured the otlphttp exporter to send metrics to Splunk Observability Cloud. We now need to enable this under the metrics pipeline.
Update the exporters section to include otlphttp/splunk under the metrics pipeline:
service: pipelines: traces: receivers: [otlp, opencensus, jaeger, zipkin] processors: [batch] exporters: [logging] metrics: receivers: [hostmetrics, otlp, opencensus, prometheus/internal] processors: [batch, resourcedetection/system, resourcedetection/ec2, attributes/conf] exporters: [logging, otlphttp/splunk] Ninja: Observing the collector internals The collector captures internal signals about its behavior this also includes additional signals from running components.</description></item></channel></rss>