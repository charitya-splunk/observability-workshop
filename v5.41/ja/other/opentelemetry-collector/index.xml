<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenTelemetryでクラウドネイティブ環境のオブザーバビリティを実現する on Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.41/ja/other/opentelemetry-collector/index.html</link><description>Recent content in OpenTelemetryでクラウドネイティブ環境のオブザーバビリティを実現する on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><language>ja</language><atom:link href="https://splunk.github.io/observability-workshop/v5.41/ja/other/opentelemetry-collector/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenTelemetry Collector Contrib をインストールする</title><link>https://splunk.github.io/observability-workshop/v5.41/ja/other/opentelemetry-collector/1-installation/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.41/ja/other/opentelemetry-collector/1-installation/index.html</guid><description>OpenTelemetry Collector の Contrib ディストリビューションをダウンロードする OpenTelemetry Collector のインストールのために、まずはダウンロードするのが最初のステップです。このラボでは、 wget コマンドを使って OpenTelemetry の GitHub リポジトリから .deb パッケージをダウンロードしていきます。
OpenTelemetry Collector Contrib releases page から、ご利用のプラットフォーム用の .deb パッケージを入手してください。
wget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.80.0/otelcol-contrib_0.80.0_linux_amd64.debOpenTelemetry Collector の Contrib ディストリビューションをインストールする dpkg を使って、 .deb パッケージをインストールします。下記の dpkg Output のようになれば、インストールは成功です！
&amp;#8203; Install dpkg Output sudo dpkg -i otelcol-contrib_0.80.0_linux_amd64.deb Selecting previously unselected package otelcol-contrib. (Reading database ... 64218 files and directories currently installed.) Preparing to unpack otelcol-contrib_0.75.0_linux_amd64.deb ... Unpacking otelcol-contrib (0.75.0) ... Setting up otelcol-contrib (0.</description></item><item><title>OpenTelemetry Collector エクステンション</title><link>https://splunk.github.io/observability-workshop/v5.41/ja/other/opentelemetry-collector/2-extensions/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.41/ja/other/opentelemetry-collector/2-extensions/index.html</guid><description>さて、OpenTelemetry Collector はインストールできました。次は OpenTelemetry Collector のエクステンション（拡張機能）を見てみましょう。エクステンションはオプションで、主にテレメトリーデータの処理を伴わないタスクで使用できます。例としては、ヘルスモニタリング、サービスディスカバリ、データ転送などがあります。
%%{ init:{ &amp;#34;theme&amp;#34;: &amp;#34;base&amp;#34;, &amp;#34;themeVariables&amp;#34;: { &amp;#34;primaryColor&amp;#34;: &amp;#34;#ffffff&amp;#34;, &amp;#34;clusterBkg&amp;#34;: &amp;#34;#eff2fb&amp;#34;, &amp;#34;defaultLinkColor&amp;#34;: &amp;#34;#333333&amp;#34; } } }%% flowchart LR; style E fill:#e20082,stroke:#333,stroke-width:4px,color:#fff subgraph Receivers A[OTLP] --&amp;gt; M(Receivers) B[JAEGER] --&amp;gt; M(Receivers) C[Prometheus] --&amp;gt; M(Receivers) end subgraph Processors M(Receivers) --&amp;gt; H(Filters, Attributes, etc) E(Extensions) end subgraph Exporters H(Filters, Attributes, etc) --&amp;gt; S(OTLP) H(Filters, Attributes, etc) --&amp;gt; T(JAEGER) H(Filters, Attributes, etc) --&amp;gt; U(Prometheus) end</description></item><item><title>OpenTelemetry Collector レシーバー</title><link>https://splunk.github.io/observability-workshop/v5.41/ja/other/opentelemetry-collector/3-receivers/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.41/ja/other/opentelemetry-collector/3-receivers/index.html</guid><description>レシーバーワークショップへようこそ！OpenTelemetry Collectorのデータパイプラインのスタート地点です。さあ、始めましょう。
レシーバーはデータをCollectorに取り込む方法で、プッシュベースとプルベースのものがあります。レシーバーは1つ以上のデータソースをサポートします。一般的に、レシーバーは指定されたフォーマットでデータを受け入れ、内部フォーマットに変換し、該当するパイプラインで定義されたプロセッサやエクスポータにデータを渡します。
プッシュまたはプルベースのレシーバは、データをCollectorに取り込む方法です。レシーバは 1 つまたは複数のデータソースをサポートします。通常、レシーバは指定されたフォーマットでデータを受け入れ、内部フォーマットに変換し、該当するパイプラインで定義されたプロセッサーや エクスポーターにデータを渡します。
%%{ init:{ &amp;#34;theme&amp;#34;:&amp;#34;base&amp;#34;, &amp;#34;themeVariables&amp;#34;: { &amp;#34;primaryColor&amp;#34;: &amp;#34;#ffffff&amp;#34;, &amp;#34;clusterBkg&amp;#34;: &amp;#34;#eff2fb&amp;#34;, &amp;#34;defaultLinkColor&amp;#34;: &amp;#34;#333333&amp;#34; } } }%% flowchart LR; style M fill:#e20082,stroke:#333,stroke-width:4px,color:#fff subgraph Receivers A[OTLP] --&amp;gt; M(Receivers) B[JAEGER] --&amp;gt; M(Receivers) C[Prometheus] --&amp;gt; M(Receivers) end subgraph Processors M(Receivers) --&amp;gt; H(Filters, Attributes, etc) E(Extensions) end subgraph Exporters H(Filters, Attributes, etc) --&amp;gt; S(OTLP) H(Filters, Attributes, etc) --&amp;gt; T(JAEGER) H(Filters, Attributes, etc) --&amp;gt; U(Prometheus) end</description></item><item><title>OpenTelemetry Collector プロセッサー</title><link>https://splunk.github.io/observability-workshop/v5.41/ja/other/opentelemetry-collector/4-processors/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.41/ja/other/opentelemetry-collector/4-processors/index.html</guid><description>プロセッサーは、レシーバーとエクスポーターとの間で、データに対して実行される処理です。プロセッサーはオプションですが、いくつかは推奨されています。OpenTelemetry Collector Contrib には多数のプロセッサーが含まれています。
%%{ init:{ &amp;#34;theme&amp;#34;:&amp;#34;base&amp;#34;, &amp;#34;themeVariables&amp;#34;: { &amp;#34;primaryColor&amp;#34;: &amp;#34;#ffffff&amp;#34;, &amp;#34;clusterBkg&amp;#34;: &amp;#34;#eff2fb&amp;#34;, &amp;#34;defaultLinkColor&amp;#34;: &amp;#34;#333333&amp;#34; } } }%% flowchart LR; style Processors fill:#e20082,stroke:#333,stroke-width:4px,color:#fff subgraph Receivers A[OTLP] --&amp;gt; M(Receivers) B[JAEGER] --&amp;gt; M(Receivers) C[Prometheus] --&amp;gt; M(Receivers) end subgraph Processors M(Receivers) --&amp;gt; H(Filters, Attributes, etc) E(Extensions) end subgraph Exporters H(Filters, Attributes, etc) --&amp;gt; S(OTLP) H(Filters, Attributes, etc) --&amp;gt; T(JAEGER) H(Filters, Attributes, etc) --&amp;gt; U(Prometheus) end</description></item><item><title>OpenTelemetry Collector エクスポーター</title><link>https://splunk.github.io/observability-workshop/v5.41/ja/other/opentelemetry-collector/5-exporters/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.41/ja/other/opentelemetry-collector/5-exporters/index.html</guid><description>エクスポーターは、プッシュまたはプルベースであり、一つ以上のバックエンド/デスティネーションにデータを送信する方法です。エクスポーターは、一つまたは複数のデータソースをサポートすることがあります。
このワークショップでは、otlphttp エクスポーターを使用します。OpenTelemetry Protocol (OTLP) は、テレメトリーデータを伝送するためのベンダーニュートラルで標準化されたプロトコルです。OTLP エクスポーターは、OTLP プロトコルを実装するサーバーにデータを送信します。OTLP エクスポーターは、gRPC および HTTP/JSON プロトコルの両方をサポートします。
%%{ init:{ &amp;#34;theme&amp;#34;:&amp;#34;base&amp;#34;, &amp;#34;themeVariables&amp;#34;: { &amp;#34;primaryColor&amp;#34;: &amp;#34;#ffffff&amp;#34;, &amp;#34;clusterBkg&amp;#34;: &amp;#34;#eff2fb&amp;#34;, &amp;#34;defaultLinkColor&amp;#34;: &amp;#34;#333333&amp;#34; } } }%% flowchart LR; style Exporters fill:#e20082,stroke:#333,stroke-width:4px,color:#fff subgraph Receivers A[OTLP] --&amp;gt; M(Receivers) B[JAEGER] --&amp;gt; M(Receivers) C[Prometheus] --&amp;gt; M(Receivers) end subgraph Processors M(Receivers) --&amp;gt; H(Filters, Attributes, etc) E(Extensions) end subgraph Exporters H(Filters, Attributes, etc) --&amp;gt; S(OTLP) H(Filters, Attributes, etc) --&amp;gt; T(JAEGER) H(Filters, Attributes, etc) --&amp;gt; U(Prometheus) end</description></item><item><title>OpenTelemetry Collector サービス</title><link>https://splunk.github.io/observability-workshop/v5.41/ja/other/opentelemetry-collector/6-service/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.41/ja/other/opentelemetry-collector/6-service/index.html</guid><description>Service セクションでは、レシーバー、プロセッサー、エクスポーター、およびエクステンションにある設定に基づいて、コレクターで有効にするコンポーネントを設定していきます。
情報 コンポーネントが設定されていても、Service セクション内で定義されていない場合、そのコンポーネントは有効化されません。
サービスのセクションは、以下の3つのサブセクションで構成されています：
extensions（拡張機能） pipelines（パイプライン） telemetry（テレメトリー） デフォルトの設定では、拡張機能セクションが health_check、pprof、zpages を有効にするように設定されており、これらは以前のエクステンションのモジュールで設定しました。
service: extensions: [health_check, pprof, zpages]それでは、メトリックパイプラインを設定していきましょう！</description></item><item><title>データの可視化</title><link>https://splunk.github.io/observability-workshop/v5.41/ja/other/opentelemetry-collector/7-visualisation/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.41/ja/other/opentelemetry-collector/7-visualisation/index.html</guid><description>Splunk Observability Cloud OpenTelemetry Collector を設定して Splunk Observability Cloud にメトリクスを送信するようにしたので、Splunk Observability Cloud でデータを見てみましょう。Splunk Observability Cloud　への招待を受け取っていない場合は、講師がログイン資格情報を提供します。
その前に、もう少し興味深くするために、インスタンスでストレステストを実行しましょう。これにより、ダッシュボードが活性化されます。
sudo apt install stress while true; do stress -c 2 -t 40; stress -d 5 -t 40; stress -m 20 -t 40; doneSplunk Observability Cloudにログインしたら、左側のナビゲーションを使用して Dashboards に移動します：
検索ボックスで OTel Contrib を検索します：
情報 ダッシュボードが存在しない場合は、講師が迅速に追加します。このワークショップの Splunk 主催版に参加していない場合、インポートするダッシュボードグループはこのページの下部にあります。
OTel Contrib Dashboard ダッシュボードをクリックして開きます：
ダッシュボードの上部にある Filter 欄に「participant」の途中まで入力し、候補に出る participant.name を選択します：
participant.name で、config.yaml 内で設定したあなたの名前を入力するか、リストから選択することができます：
これで、OpenTelemetry Collector を設定したホストの、ホストメトリクスを確認することができます。
ダッシュボードJSONのダウンロード方法 dashboard_OTel-Contrib-Dashboard.json (40 KB)</description></item><item><title>OpenTelemetry Collector を開発する</title><link>https://splunk.github.io/observability-workshop/v5.41/ja/other/opentelemetry-collector/8-develop/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.41/ja/other/opentelemetry-collector/8-develop/index.html</guid><description>カスタムコンポーネントの開発 Open Telemetry Collectorのためのコンポーネントを構築するには、以下の3つの主要な部分が必要です：
Configuration - ユーザーが設定できる値は何か Factory - 提供された値を使ってコンポーネントを作成する Business Logic - コンポーネントが実行する必要があること これについて、プロジェクトの重要なDevOpsメトリクスを追跡するためにJenkinsと連携するコンポーネントを構築する例を考えていきます。
測定しようとしているメトリクスは次のとおりです：
変更に対するリードタイム - 「コミットが本番環境に入るまでにかかる時間」 変更失敗率 - 「本番環境での障害を引き起こすデプロイの割合」 デプロイ頻度 - 「[チーム]が本番環境に成功してリリースする頻度」 平均復旧時間 - 「[チーム]が本番環境の障害から復旧するのにかかる時間」 これらの指標は Google の DevOps Research and Assessment (DORA) チームによって特定されたもので、ソフトウェア開発チームのパフォーマンスを示すのに役立ちます。Jenkins CI を選択した理由は、私たちが同じオープンソースソフトウェアエコシステムに留まり、将来的にベンダー管理のCIツールが採用する例となることができるためです。
計装 🆚 コンポーネント 組織内でオブザーバビリティを向上させる際には、トレードオフが発生するため、考慮する点があります。
長所 短所 （自動）計装1 システムを観測するために外部APIが不要 計装を変更するにはプロジェクトの変更が必要 システム所有者/開発者は可観測性の変更が可能 ランタイムへの追加の依存が必要 システムの文脈を理解し、Exemplar とキャプチャされたデータを関連付けることが可能 システムのパフォーマンスに影響を与える可能性がある コンポーネント データ名や意味の変更をシステムのリリースサイクルから独立した展開が可能 APIの破壊的な変更の可能性があり、システムとコレクター間でリリースの調整が必要 その後の利用に合わせて収集されるデータの更新/拡張が容易 キャプチャされたデータの意味がシステムリリースと一致せず、予期せず壊れる可能性がある 計装（instrument, インストゥルメント）とは、アプリケーションなどのシステムコンポーネントに対して、トレースやメトリクス、ログなどのテレメトリーデータを出力させる実装。計装ライブラリを最低限セットアップするだけで一通りのトレースやメトリクスなどを出力できるような対応を「自動計装」と呼びます。&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description></item></channel></rss>