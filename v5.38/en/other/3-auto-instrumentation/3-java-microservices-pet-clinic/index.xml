<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Workshop using the Java microservices Pet Clinic demo (Kubernetes based). on Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.38/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/index.html</link><description>Recent content in Workshop using the Java microservices Pet Clinic demo (Kubernetes based). on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.38/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/index.xml" rel="self" type="application/rss+xml"/><item><title>Preparation of the Pet Clinic application.</title><link>https://splunk.github.io/observability-workshop/v5.38/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/10-preparation/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.38/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/10-preparation/index.html</guid><description>1. Validate the settings for your workshop To ensure your instance is configured correctly, we need to confirm that the required environment variables for this workshop are set correctly. In your terminal run the following command:
. ~/workshop/petclinic/scripts/check_env.shIn the output check the following environment variables are present and have values set:
ACCESS_TOKEN REALM RUM_TOKEN HEC_TOKEN HEC_URL INSTANCEPlease make a note of the INSTANCE environment variable value as this is the reference to you workshop instance and we will need it to filter the data in the Splunk Observability Suite UI.</description></item><item><title>Installing the OpenTelemetry Collector</title><link>https://splunk.github.io/observability-workshop/v5.38/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/20-otel-collector/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.38/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/20-otel-collector/index.html</guid><description>1. Introduction The Splunk OpenTelemetry Collector is the core component of instrumenting infrastructure and applications. Its role is to collect and send:
Infrastructure metrics (disk, CPU, memory, etc) Application Performance Monitoring (APM) traces Profiling data Host and Application logs To get Observability signals into the Splunk Observability Cloud we need to add an OpenTelemetry Collector to our Kubernetes cluster.
Delete any existing OpenTelemetry Collectors If you have completed a Splunk Observability workshop using this EC2 instance, please ensure you have deleted the collector running in Kubernetes before continuing with this workshop.</description></item><item><title>Setting up Zero configuration Auto instrumentation for APM</title><link>https://splunk.github.io/observability-workshop/v5.38/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/30-auto-instrumentation/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.38/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/30-auto-instrumentation/index.html</guid><description>In the previous chapter, we enabled the OpenTelemetry Collector for Kubernetes on our cluster and configured it to send metrics both Kubernetes and Mysql metrics to the Splunk Observability Cloud. The next step is to enable auto-instrumentation for our Java apps running in the pods in our cluster.
Zero Config Auto Instrumentation It is important to understand that Zero Config Auto instrumentation is designed to get Trace/Span &amp;amp; Profiling data out of your existing application, without requiring you to change your code or requiring to rebuild.</description></item><item><title>Database Query Performance &amp; Always-on Profiling</title><link>https://splunk.github.io/observability-workshop/v5.38/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/40-dbquery-profiling/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.38/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/40-dbquery-profiling/index.html</guid><description>WIP 1. Introduction</description></item><item><title>Log Observer</title><link>https://splunk.github.io/observability-workshop/v5.38/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/60-log-observer-connect/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.38/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/60-log-observer-connect/index.html</guid><description>1. Introduction Until this point, we have not touched or changed our code, yet we did receive Trace &amp;amp; Profiling/DB Query performance information. If we want to get more out of our Java application, we can introduce a small change to our application log setup.
This change will configure the Spring PetClinic application to use an Otel Based format to write logs, This will allow the (Auto)-instrumentation to add Otel relevant information into the logs.</description></item><item><title>Real User Monitoring</title><link>https://splunk.github.io/observability-workshop/v5.38/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/70-rum/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.38/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/70-rum/index.html</guid><description>1. Enable RUM For the Real User Monitoring (RUM) instrumentation, we will add the Open Telemetry Javascript https://github.com/signalfx/splunk-otel-js-web snippet in the pages, we will use the wizard again Data Management → Add Integration → RUM Instrumentation → Browser Instrumentation.
Your instructor will inform you which token to use from the dropdown, click Next. Enter App name and Environment using the following syntax:
&amp;lt;INSTANCE&amp;gt;-petclinic-service - replacing &amp;lt;INSTANCE&amp;gt; with the value you noted down earlier.</description></item></channel></rss>