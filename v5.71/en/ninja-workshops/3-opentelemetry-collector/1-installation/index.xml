<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Installing OpenTelemetry Collector Contrib :: Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/3-opentelemetry-collector/1-installation/index.html</link><description>Download the OpenTelemetry Collector Contrib distribution The first step in installing the Open Telemetry Collector is downloading it. For our lab, we will use the wget command to download the .deb package from the OpenTelemetry Github repository.
Obtain the .deb package for your platform from the OpenTelemetry Collector Contrib releases page
wget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.111.0/otelcol-contrib_0.111.0_linux_amd64.deb Install the OpenTelemetry Collector Contrib distribution Install the .deb package using dpkg. Take a look at the dpkg Output tab below to see what the example output of a successful install will look like:</description><generator>Hugo</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/3-opentelemetry-collector/1-installation/index.xml" rel="self" type="application/rss+xml"/><item><title>Installing OpenTelemetry Collector Contrib</title><link>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/3-opentelemetry-collector/1-installation/1-confirmation/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/3-opentelemetry-collector/1-installation/1-confirmation/index.html</guid><description>Confirm the Collector is running The collector should now be running. We will verify this as root using systemctl command. To exit the status just press q.
​ Command Status Output sudo systemctl status otelcol-contrib ● otelcol-contrib.service - OpenTelemetry Collector Contrib Loaded: loaded (/lib/systemd/system/otelcol-contrib.service; enabled; vendor preset: enabled) Active: active (running) since Mon 2024-10-07 10:27:49 BST; 52s ago Main PID: 17113 (otelcol-contrib) Tasks: 13 (limit: 19238) Memory: 34.8M CPU: 155ms CGroup: /system.slice/otelcol-contrib.service └─17113 /usr/bin/otelcol-contrib --config=/etc/otelcol-contrib/config.yaml Oct 07 10:28:36 petclinic-rum-testing otelcol-contrib[17113]: Descriptor: Oct 07 10:28:36 petclinic-rum-testing otelcol-contrib[17113]: -> Name: up Oct 07 10:28:36 petclinic-rum-testing otelcol-contrib[17113]: -> Description: The scraping was successful Oct 07 10:28:36 petclinic-rum-testing otelcol-contrib[17113]: -> Unit: Oct 07 10:28:36 petclinic-rum-testing otelcol-contrib[17113]: -> DataType: Gauge Oct 07 10:28:36 petclinic-rum-testing otelcol-contrib[17113]: NumberDataPoints #0 Oct 07 10:28:36 petclinic-rum-testing otelcol-contrib[17113]: StartTimestamp: 1970-01-01 00:00:00 +0000 UTC Oct 07 10:28:36 petclinic-rum-testing otelcol-contrib[17113]: Timestamp: 2024-10-07 09:28:36.942 +0000 UTC Oct 07 10:28:36 petclinic-rum-testing otelcol-contrib[17113]: Value: 1.000000 Oct 07 10:28:36 petclinic-rum-testing otelcol-contrib[17113]: {"kind": "exporter", "data_type": "metrics", "name": "debug"} Because we will be making multiple configuration file changes, setting environment variables and restarting the collector, we need to stop the collector service and disable it from starting on boot.</description></item></channel></rss>