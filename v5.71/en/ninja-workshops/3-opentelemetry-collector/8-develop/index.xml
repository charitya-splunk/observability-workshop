<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenTelemetry Collector Development :: Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/3-opentelemetry-collector/8-develop/index.html</link><description>Developing a custom component Building a component for the Open Telemetry Collector requires three key parts:
The Configuration - What values are exposed to the user to configure The Factory - Make the component using the provided values The Business Logic - What the component needs to do For this, we will use the example of building a component that works with Jenkins so that we can track important DevOps metrics of our project(s).</description><generator>Hugo</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/3-opentelemetry-collector/8-develop/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenTelemetry Collector Development</title><link>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/3-opentelemetry-collector/8-develop/1-project-setup/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/3-opentelemetry-collector/8-develop/1-project-setup/index.html</guid><description>Project Setup Ninja Note The time to finish this section of the workshop can vary depending on experience.
A complete solution can be found here in case you’re stuck or want to follow along with the instructor.
To get started developing the new Jenkins CI receiver, we first need to set up a Golang project. The steps to create your new Golang project is:</description></item><item><title>OpenTelemetry Collector Development</title><link>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/3-opentelemetry-collector/8-develop/2-configuration/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/3-opentelemetry-collector/8-develop/2-configuration/index.html</guid><description>Building The Configuration The configuration portion of the component is how the user is able to have their inputs over the component, so the values that is used for the configuration need to be:
Intuitive for users to understand what that field controls Be explicit in what is required and what is optional Reuse common names and fields Keep the options simple ​ bad config good config --- jenkins_server_addr: hostname jenkins_server_api_port: 8089 interval: 10m filter_builds_by: - name: my-awesome-build status: amber track: values: example.metric.1: yes example.metric.2: yes example.metric.3: no example.metric.4: no --- # Required Values endpoint: http://my-jenkins-server:8089 auth: authenticator: basicauth/jenkins # Optional Values collection_interval: 10m metrics: example.metric.1: enabled: true example.metric.2: enabled: true example.metric.3: enabled: true example.metric.4: enabled: true The bad configuration highlights how doing the opposite of the recommendations of configuration practices impacts the usability of the component. It doesn’t make it clear what field values should be, it includes features that can be pushed to existing processors, and the field naming is not consistent with other components that exist in the collector.</description></item><item><title>OpenTelemetry Collector Development</title><link>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/3-opentelemetry-collector/8-develop/3-component/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/3-opentelemetry-collector/8-develop/3-component/index.html</guid><description>Component Review To recap the type of component we will need to capture metrics from Jenkins:
​ Extension Receiver Processor Exporter Ninja: Connectors The business use case an extension helps solves for are:
Having shared functionality that requires runtime configuration Indirectly helps with observing the runtime of the collector See Extensions Overview for more details.</description></item><item><title>OpenTelemetry Collector Development</title><link>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/3-opentelemetry-collector/8-develop/4-design/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/3-opentelemetry-collector/8-develop/4-design/index.html</guid><description>Designing The Metrics To help define and export the metrics captured by our receiver, we will be using, mdatagen, a tool developed for the collector that turns YAML defined metrics into code.
​ metadata.yaml gen.go --- # Type defines the name to reference the component # in the configuration file type: jenkins # Status defines the component type and the stability level status: class: receiver stability: development: [metrics] # Attributes are the expected fields reported # with the exported values. attributes: job.name: description: The name of the associated Jenkins job type: string job.status: description: Shows if the job had passed, or failed type: string enum: - failed - success - unknown # Metrics defines all the pontentially exported values from this receiver. metrics: jenkins.jobs.count: enabled: true description: Provides a count of the total number of configured jobs unit: "{Count}" gauge: value_type: int jenkins.job.duration: enabled: true description: Show the duration of the job unit: "s" gauge: value_type: int attributes: - job.name - job.status jenkins.job.commit_delta: enabled: true description: The calculation difference of the time job was finished minus commit timestamp unit: "s" gauge: value_type: int attributes: - job.name - job.status // To generate the additional code needed to capture metrics, // the following command to be run from the shell: // go generate -x ./... //go:generate go run github.com/open-telemetry/opentelemetry-collector-contrib/cmd/mdatagen@v0.80.0 metadata.yaml package jenkinscireceiver // There is no code defined within this file. Create these files within the project folder before continuing onto the next section.</description></item><item><title>OpenTelemetry Collector Development</title><link>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/3-opentelemetry-collector/8-develop/5-business-logic/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/3-opentelemetry-collector/8-develop/5-business-logic/index.html</guid><description>Building The Business Logic At this point, we have a custom component that currently does nothing so we need to add in the required logic to capture this data from Jenkins.
From this point, the steps that we need to take are:
Create a client that connect to Jenkins Capture all the configured jobs Report the status of the last build for the configured job Calculate the time difference between commit timestamp and job completion. The changes will be made to scraper.go.</description></item></channel></rss>