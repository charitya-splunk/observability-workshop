<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PetClinic Monolith Workshop :: Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/1-automatic-discovery/1-petclinic-monolith/index.html</link><description>A workshop using automatic discovery and configuration for Java.</description><generator>Hugo</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/1-automatic-discovery/1-petclinic-monolith/index.xml" rel="self" type="application/rss+xml"/><item><title>Installing the OpenTelemetry Collector</title><link>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/1-automatic-discovery/1-petclinic-monolith/1-otel-collector/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/1-automatic-discovery/1-petclinic-monolith/1-otel-collector/index.html</guid><description>The Splunk OpenTelemetry Collector is the core component of instrumenting infrastructure and applications. Its role is to collect and send:
Infrastructure metrics (disk, CPU, memory, etc) Application Performance Monitoring (APM) traces Profiling data Host and application logs Remove any existing OpenTelemetry Collectors If you have completed the Splunk IM workshop, please ensure you have deleted the collector running in Kubernetes before continuing. This can be done by running the following command:</description></item><item><title>Building the Spring PetClinic Application</title><link>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/1-automatic-discovery/1-petclinic-monolith/2-building-petclinic/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/1-automatic-discovery/1-petclinic-monolith/2-building-petclinic/index.html</guid><description>The first thing we need to set up APM is… well, an application. For this exercise, we will use the Spring PetClinic application. This is a very popular sample Java application built with the Spring framework (Springboot).
First, clone the PetClinic GitHub repository, and then we will compile, build, package and test the application:
git clone https://github.com/spring-projects/spring-petclinic Change into the spring-petclinic directory:
cd spring-petclinic Using Docker, start a MySQL database for PetClinic to use:</description></item><item><title>Automatic discovery and configuration for Java</title><link>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/1-automatic-discovery/1-petclinic-monolith/3-auto-discovery/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/1-automatic-discovery/1-petclinic-monolith/3-auto-discovery/index.html</guid><description>You can now start the application with the following command. Notice that we are passing the mysql profile to the application, this will tell the application to use the MySQL database we started earlier. We are also setting the otel.service.name and otel.resource.attributes to a logical names using the instance name. These will also be used in the UI for filtering:
java \ -Dserver.port=8083 \ -Dotel.service.name=$INSTANCE-petclinic-service \ -Dotel.resource.attributes=deployment.environment=$INSTANCE-petclinic-env \ -jar target/spring-petclinic-*.jar --spring.profiles.active=mysql You can validate the application is running by visiting http://&lt;IP_ADDRESS>:8083 (replace &lt;IP_ADDRESS> with the IP address you obtained earlier).</description></item><item><title>3. Real User Monitoring</title><link>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/1-automatic-discovery/1-petclinic-monolith/4-rum/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/1-automatic-discovery/1-petclinic-monolith/4-rum/index.html</guid><description>For the Real User Monitoring (RUM) instrumentation, we will add the Open Telemetry Javascript https://github.com/signalfx/splunk-otel-js-web snippet in the pages, we will use the wizard again Data Management → Add Integration → RUM Instrumentation → Browser Instrumentation.
Your instructor will inform you which token to use from the dropdown, click Next. Enter App name and Environment using the following syntax:
&lt;INSTANCE>-petclinic-service - replacing &lt;INSTANCE> with the value you noted down earlier. &lt;INSTANCE>-petclinic-env - replacing &lt;INSTANCE> with the value you noted down earlier. The wizard will then show a snippet of HTML code that needs to be placed at the top of the pages in the &lt;head> section. The following is an example of the (do not use this snippet, use the one generated by the wizard):</description></item><item><title>4. Log Observer</title><link>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/1-automatic-discovery/1-petclinic-monolith/5-log-observer/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/ninja-workshops/1-automatic-discovery/1-petclinic-monolith/5-log-observer/index.html</guid><description>For the Splunk Log Observer component, the Splunk OpenTelemetry Collector automatically collects logs from the Spring PetClinic application and sends them to Splunk Observability Cloud using the OTLP exporter, anotating the log events with trace_id, span_id and trace flags.
Log Observer provides a real-time view of logs from your applications and infrastructure. It allows you to search, filter, and analyze logs to troubleshoot issues and monitor your environment.
Go back to the PetClinic web application and click on the Error link several times. This will generate some log messages in the PetClinic application logs.</description></item></channel></rss>