<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Splunk Log Observer :: Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.71/en/s4r/7-log-observer/index.html</link><description>In this section, we will use Log Observer to drill down and identify what the problem is.</description><generator>Hugo</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.71/en/s4r/7-log-observer/index.xml" rel="self" type="application/rss+xml"/><item><title>1. Log Filtering</title><link>https://splunk.github.io/observability-workshop/v5.71/en/s4r/7-log-observer/1-log-filtering/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/s4r/7-log-observer/1-log-filtering/index.html</guid><description>Log Observer (LO), can be used in multiple ways. In the quick tour, you used the LO no-code interface to search for specific entries in the logs. This section, however, assumes you have arrived in LO from a trace in APM using the Related Content link.
The advantage of this is, as it was with the link between RUM &amp; APM, that you are looking at your logs within the context of your previous actions. In this case, the context is the time frame (1), which matches that of the trace and the filter (2) which is set to the trace_id.</description></item><item><title>2. Viewing Log Entries</title><link>https://splunk.github.io/observability-workshop/v5.71/en/s4r/7-log-observer/2-log-entry/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/s4r/7-log-observer/2-log-entry/index.html</guid><description>Before we look at a specific log line, let’s quickly recap what we have done so far and why we are here based on the 3 pillars of Observability:
Metrics Traces Logs Do I have a problem? Where is the problem? What is the problem? Using metrics we identified we have a problem with our application. This was obvious from the error rate in the Service Dashboards as it was higher than it should be. Using traces and span tags we found where the problem is. The paymentservice comprises of two versions, v350.9 and v350.10, and the error rate was 100% for v350.10. We did see that this error from the paymentservice v350.10 caused multiple retries and a long delay in the response back from the Online Boutique checkout. From the trace, using the power of Related Content, we arrived at the log entries for the failing paymentservice version. Now, we can determine what the problem is. Exercise Click on an error entry in the log table (make sure it says hostname: "paymentservice-xxxx" in case there is a rare error from a different service in the list too. ​ Question Answer Based on the message, what would you tell the development team to do to resolve the issue?</description></item><item><title>3. Log Timeline Chart</title><link>https://splunk.github.io/observability-workshop/v5.71/en/s4r/7-log-observer/3-log-timeline-chart/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/s4r/7-log-observer/3-log-timeline-chart/index.html</guid><description>Once you have a specific view in Log Observer, it is very useful to be able to use that view in a dashboard, to help in the future with reducing the time to detect or resolve issues. As part of the workshop, we will create an example custom dashboard that will use these charts.
Let’s look at creating a Log Timeline chart. The Log Timeline chart is used for visualizing log messages over time. It is a great way to see the frequency of log messages and to identify patterns. It is also a great way to see the distribution of log messages across your environment. These charts can be saved to a custom dashboard.</description></item><item><title>4. Log View Chart</title><link>https://splunk.github.io/observability-workshop/v5.71/en/s4r/7-log-observer/4-log-view-chart/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/s4r/7-log-observer/4-log-view-chart/index.html</guid><description>The next chart type that can be used with logs is the Log View chart type. This chart will allow us to see log messages based on predefined filters.
As with the previous Log Timeline chart, we will add a version of this chart to our Customer Health Service Dashboard:
Exercise After the previous exercise make sure you are still in Log Observer. The filters should be the same as the previous exercise, with the time picker set to the Last 15 minutes and filtering on severity=error, sf_service=paymentservice and sf_environment=[WORKSHOPNAME]. Make sure we have the header with just the fields we wanted. Click again on Save and then Save to Dashboard. This will again provide you with the Chart creation dialog. For the Chart name use Log View. This time Click Select Dashboard and search for the Dashboard you created in the previous exercise. You can start by typing your initials in the search box (1). Click on your dashboard name to highlight it (2) and click OK (3). This will return you to the create chart dialog. Ensure Log View is selected as the Chart Type. To see your dashboard click Save and go to dashboard. The result should be similar to the dashboard below: As the last step in this exercise, let us add your dashboard to your workshop team page, this will make it easy to find later in the workshop. At the top of the page, click on the … to the left of your dashboard name (1). Select Link to teams from the drop-down (2). In the following Link to teams dialog box, find the Workshop team that your instructor will have provided for you and click Done. In the next session, we will look at Splunk Synthetics and see how we can automate the testing of web-based applications.</description></item></channel></rss>