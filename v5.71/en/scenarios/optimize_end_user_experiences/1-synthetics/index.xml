<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Synthetics :: Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/1-synthetics/index.html</link><description>Let’s quickly set up some tests in Synthetics to immediately start understanding our end user experience, without waiting for real users to interact with our app.
We can capture not only the performance and availability of our own apps and endpoints, but also those third parties we rely on any time of the day or night.
Tip If you find that your tests are being bot-blocked, see the docs for tips on how to allow Synthetic testing. if you need to test something that is not accessible externally, see private location instructions.</description><generator>Hugo</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/1-synthetics/index.xml" rel="self" type="application/rss+xml"/><item><title>Uptime Test</title><link>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/1-synthetics/1-uptime/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/1-synthetics/1-uptime/index.html</guid><description>Introduction The simplest way to keep an eye on endpoint availability is with an Uptime test. This lightweight test can run internally or externally around the world, as frequently as every minute. Because this is the easiest (and cheapest!) test to set up, and because this is ideal for monitoring availability of your most critical enpoints and ports, let’s start here.
Pre-requisites Publicly accessible HTTP(S) endpoint(s) to test Access to Splunk Observability Cloud</description></item><item><title>API Test</title><link>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/1-synthetics/2-api-test/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/1-synthetics/2-api-test/index.html</guid><description>The API test provides a flexible way to check the functionality and performance of API endpoints. The shift toward API-first development has magnified the necessity to monitor the back-end services that provide your core front-end functionality.
Whether you’re interested in testing multi-step API interactions or you want to gain visibility into the performance of your endpoints, the API Test can help you accomplish your goals.
This excercise will walk through a multi-step test on the Spotify API. You can also use it as a reference to build tests on your own APIs or on those of your critical third parties.</description></item><item><title>Single Page Browser Test</title><link>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/1-synthetics/3-browser/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/1-synthetics/3-browser/index.html</guid><description>We have started testing our endpoints, now let’s test the front end browser experience.
Starting with a single page browser test will let us capture how first- and third-party resources impact how our end users experience our browser-based site. It also allows us to start to understand our user experience metrics before introducing the complexity of multiple steps in one test.
A page where your users commonly “land” is a good choice to start with a single page test. This could be your site homepage, a section main page, or any other high-traffic URL that is important to you and your end users.</description></item></channel></rss>