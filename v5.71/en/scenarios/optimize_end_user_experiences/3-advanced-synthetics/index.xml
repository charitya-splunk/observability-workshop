<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advanced Synthetics :: Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/3-advanced-synthetics/index.html</link><description>Proactively find and fix performance issues across user flows, business transactions and APIs to deliver better digital experiences.</description><generator>Hugo</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/3-advanced-synthetics/index.xml" rel="self" type="application/rss+xml"/><item><title>Record a test</title><link>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/3-advanced-synthetics/1-recording-a-test/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/3-advanced-synthetics/1-recording-a-test/index.html</guid><description>Write down a short user journey you want to test. Remember: smaller bites are easier to chew! In other words, get started with just a few steps. This is easier not only to create and maintain the test, but also to understand and act on the results. Test the essential features to your users, like a support contact form, login widget, or date picker.
Note Record the test in the same type of viewport that you want to run it. For example, if you want to run a test on a mobile viewport, narrow your browser width to mobile and refresh before starting the recording. This way you are capturing the correct elements that could change depending on responsive style rules.</description></item><item><title>Create a Browser Test</title><link>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/3-advanced-synthetics/2-create-real-browser-test/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/3-advanced-synthetics/2-create-real-browser-test/index.html</guid><description>In Splunk Observability Cloud, navigate to Synthetics and click on Add new test.
From the dropdown select Browser test.
You will then be presented with the Browser test content configuration page.</description></item><item><title>Import JSON</title><link>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/3-advanced-synthetics/3-import-json/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/3-advanced-synthetics/3-import-json/index.html</guid><description>To begin configuring our test, we need to import the JSON that we exported from the Chrome DevTools Recorder. To enable the Import button, we must first give our test a name e.g. [&lt;your team name>] &lt;your initials> - Online Boutique.
Once the Import button is enabled, click on it and either drop the JSON file that you exported from the Chrome DevTools Recorder or upload the file.</description></item><item><title>Test settings</title><link>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/3-advanced-synthetics/4-edit-test-settings/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/3-advanced-synthetics/4-edit-test-settings/index.html</guid><description>The simple settings allow you to configure the basics of the test:
Name: The name of the test (e.g. RWC - Online Boutique). Details: Locations: The locations where the test will run from. Device: Emulate different devices and connection speeds. Also, the viewport will be adjusted to match the chosen device. Frequency: How often the test will run. Round-robin: If multiple locations are selected, the test will run from one location at a time, rather than all locations at once. Active: Set the test to active or inactive. ![Return to Test]For this workshop, we will configure the locations that we wish to monitor from. Click in the Locations field and you will be presented with a list of global locations (over 50 in total).</description></item><item><title>Advanced Test Settings</title><link>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/3-advanced-synthetics/5-advanced-settings/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/3-advanced-synthetics/5-advanced-settings/index.html</guid><description>Click on Advanced, these settings are optional and can be used to further configure the test.
Note In the case of this workshop, we will not be using any of these settings; this is for informational purposes only.
Security: TLS/SSL validation: When activated, this feature is used to enforce the validation of expired, invalid hostname, or untrusted issuer on SSL/TLS certificates. Authentication: Add credentials to authenticate with sites that require additional security protocols, for example from within a corporate network. By using concealed global variables in the Authentication field, you create an additional layer of security for your credentials and simplify the ability to share credentials across checks. Custom Content: Custom headers: Specify custom headers to send with each request. For example, you can add a header in your request to filter out requests from analytics on the back end by sending a specific header in the requests. You can also use custom headers to set cookies. Cookies: Set cookies in the browser before the test starts. For example, to prevent a popup modal from randomly appearing and interfering with your test, you can set cookies. Any cookies that are set will apply to the domain of the starting URL of the check. Splunk Synthetics Monitoring uses the public suffix list to determine the domain. Host overrides: Add host override rules to reroute requests from one host to another. For example, you can create a host override to test an existing production site against page resources loaded from a development site or a specific CDN edge node. Next, we will edit the test steps to provide more meaningful names for each step.</description></item><item><title>Edit test steps</title><link>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/3-advanced-synthetics/6-edit-steps/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/3-advanced-synthetics/6-edit-steps/index.html</guid><description>To edit the steps click on the + Edit steps or synthetic transactions button. From here, we are going to give meaningful names to each step.
For each step, we are going to give them a meaningful, readable name. That could look like:
Step 1 replace the text Go to URL with Go to Homepage Step 2 enter the text Select Typewriter. Step 3 enter Add to Cart. Step 4 enter Place Order.</description></item><item><title>View test results</title><link>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/3-advanced-synthetics/7-view-test-results/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/optimize_end_user_experiences/3-advanced-synthetics/7-view-test-results/index.html</guid><description>1. Click into a spike or failure in your test run results.
2. What can you learn about this test run? If it failed, use the error message, filmstrip, video replay, and waterfall to understand what happened.
3. What do you see in the resources? Make sure to click through all of the page (or transaction) tabs.</description></item></channel></rss>