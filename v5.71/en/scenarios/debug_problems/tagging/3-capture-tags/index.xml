<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Capture Tags with OpenTelemetry :: Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/debug_problems/tagging/3-capture-tags/index.html</link><description>Please proceed to one of the subsections for Java or Python. Ask your instructor for the one used during the workshop!</description><generator>Hugo</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.71/en/scenarios/debug_problems/tagging/3-capture-tags/index.xml" rel="self" type="application/rss+xml"/><item><title>1. Capture Tags - Java</title><link>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/debug_problems/tagging/3-capture-tags/1-capture-tags-java/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/debug_problems/tagging/3-capture-tags/1-capture-tags-java/index.html</guid><description>Let’s add some tags to our traces, so we can find out why some customers receive a poor experience from our application.
Identify Useful Tags We’ll start by reviewing the code for the creditCheck function of creditcheckservice (which can be found in the file /home/splunk/workshop/tagging/creditcheckservice-java/src/main/java/com/example/creditcheckservice/CreditCheckController.java):
@GetMapping("/check") public ResponseEntity&lt;String> creditCheck(@RequestParam("customernum") String customerNum) { // Get Credit Score int creditScore; try { String creditScoreUrl = "http://creditprocessorservice:8899/getScore?customernum=" + customerNum; creditScore = Integer.parseInt(restTemplate.getForObject(creditScoreUrl, String.class)); } catch (HttpClientErrorException e) { return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error getting credit score"); } String creditScoreCategory = getCreditCategoryFromScore(creditScore); // Run Credit Check String creditCheckUrl = "http://creditprocessorservice:8899/runCreditCheck?customernum=" + customerNum + "&amp;score=" + creditScore; String checkResult; try { checkResult = restTemplate.getForObject(creditCheckUrl, String.class); } catch (HttpClientErrorException e) { return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error running credit check"); } return ResponseEntity.ok(checkResult); } We can see that this function accepts a customer number as an input. This would be helpful to capture as part of a trace. What else would be helpful?</description></item><item><title>2. Capture Tags - Python</title><link>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/debug_problems/tagging/3-capture-tags/2-capture-tags-python/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.71/en/scenarios/debug_problems/tagging/3-capture-tags/2-capture-tags-python/index.html</guid><description>Let’s add some tags to our traces, so we can find out why some customers receive a poor experience from our application.
Identify Useful Tags We’ll start by reviewing the code for the credit_check function of creditcheckservice (which can be found in the /home/splunk/workshop/tagging/creditcheckservice/main.py file):
@app.route('/check') def credit_check(): customerNum = request.args.get('customernum') # Get Credit Score creditScoreReq = requests.get("http://creditprocessorservice:8899/getScore?customernum=" + customerNum) creditScoreReq.raise_for_status() creditScore = int(creditScoreReq.text) creditScoreCategory = getCreditCategoryFromScore(creditScore) # Run Credit Check creditCheckReq = requests.get("http://creditprocessorservice:8899/runCreditCheck?customernum=" + str(customerNum) + "&amp;score=" + str(creditScore)) creditCheckReq.raise_for_status() checkResult = str(creditCheckReq.text) return checkResult We can see that this function accepts a customer number as an input. This would be helpful to capture as part of a trace. What else would be helpful?</description></item></channel></rss>