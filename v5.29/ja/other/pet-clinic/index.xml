<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pet Clinic Java ワークショップ on Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.29/ja/other/pet-clinic/index.html</link><description>Recent content in Pet Clinic Java ワークショップ on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><language>ja</language><atom:link href="https://splunk.github.io/observability-workshop/v5.29/ja/other/pet-clinic/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenTelemetry Collectorをインストールする</title><link>https://splunk.github.io/observability-workshop/v5.29/ja/other/pet-clinic/docs/imt/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.29/ja/other/pet-clinic/docs/imt/index.html</guid><description>1. はじめに OpenTelemetry Collectorは、インフラストラクチャーとアプリケーションを計装するためのコアコンポーネントです。 その役割は収集と送信です：
インフラストラクチャーのメトリクス（ディスク、CPU、メモリなど） アプリケーションパフォーマンスモニタリング（APM）のトレース情報 プロファイリングに関するデータ ホストおよびアプリケーションのログ Splunk Observability Cloudでは、インフラストラクチャーとアプリケーションの両方で Collector のセットアップを案内するウィザードを提供しています。デフォルトでは、ウィザードはコレクターのインストールのみを行うコマンドのみを提供します。
2. 環境変数を設定する すでに Splunk IM ワークショップを終了している場合は、既存の環境変数を利用することができます。そうでない場合は、ACCESS_TOKENとREALMの環境変数を設定して、OpenTelemetry Collectorのインストールコマンドを実行していきます。
例えば、Realmが us1 の場合、export REALM=us1 と入力し、eu0 の場合は export REALM=eu0 と入力します。
&amp;#8203; ACCESS TOKENを環境変数に設定する export ACCESS_TOKEN=&amp;#34;&amp;lt;replace_with_O11y-Workshop-ACCESS_TOKEN&amp;gt;&amp;#34; &amp;#8203; REALMを環境変数に設定する export REALM=&amp;#34;&amp;lt;replace_with_REALM&amp;gt;&amp;#34; 既存のOpenTelemetryコレクターをすべて削除する 同じVMインスタンスにSplunk IM ワークショップのセットアップをしている場合、Otel Collectorをインストールする前に Kubernetes で実行中の Collector を削除していることを確認してください。これは、以下のコマンドを実行することで行うことができます：
helm delete splunk-otel-collector 3. OpenTelemetry Collectorをインストールする 次に、Collectorをインストールします。インストールスクリプトに渡される追加のパラメータは --deployment-environment です。
curl -sSL https://dl.signalfx.com/splunk-otel-collector.sh &amp;gt; /tmp/splunk-otel-collector.sh &amp;amp;&amp;amp; \ sudo sh /tmp/splunk-otel-collector.sh --deployment-environment $(hostname)-petclinic --realm $REALM -- $ACCESS_TOKEN AWS/EC2インスタンスの場合 。 AWS/EC2インスタンス上でこのワークショップを行う場合、インスタンスのホスト名を公開するためにコレクターにパッチを適用する必要があります：</description></item><item><title>OpenTelemetry Javaエージェントをインストールする</title><link>https://splunk.github.io/observability-workshop/v5.29/ja/other/pet-clinic/docs/apm/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.29/ja/other/pet-clinic/docs/apm/index.html</guid><description>1. Spring PetClinic アプリケーションを動かす APMをセットアップするためにまず必要なのは&amp;hellip;そう、アプリケーションです！この演習では、Spring PetClinicアプリケーションを使用します。これはSpringフレームワーク（Spring Boot）で作られた、非常に人気のあるサンプルJavaアプリケーションです。
まずはPetClinicリポジトリをクローンし、そして、アプリケーションをコンパイル、ビルド、パッケージ、テストしていきます。
git clone https://github.com/spring-projects/spring-petclinicspring-petclinic ディレクトリに移動します:
cd spring-petclinicPetClinic が使用する MySQL データベースを起動します:
docker run -d -e MYSQL_USER=petclinic -e MYSQL_PASSWORD=petclinic -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=petclinic -p 3306:3306 docker.io/mysql:5.7.8そして、Splunk版のOpenTelemetry Java APMエージェントをダウンロードしておきましょう。
curl -L https://github.com/signalfx/splunk-otel-java/releases/latest/download/splunk-otel-javaagent.jar \ -o splunk-otel-javaagent.jar次に、mavenコマンドを実行してPetClinicをコンパイル/ビルド/パッケージ化します:
./mvnw package -Dmaven.test.skip=true 情報 実際にアプリをコンパイルする前に、mavenが多くの依存ライブラリをダウンロードするため、初回実行時には数分かかるでしょう。2回目以降の実行はもっと短くなります。
そして、以下のコマンドでアプリケーションを実行することができます:
java -javaagent:./splunk-otel-javaagent.jar \ -Dserver.port=8083 \ -Dotel.service.name=$(hostname).service \ -Dotel.resource.attributes=deployment.environment=$(hostname),version=0.314 \ -Dsplunk.profiler.enabled=true \ -Dsplunk.profiler.memory.enabled=true \ -Dsplunk.metrics.enabled=true \ -jar target/spring-petclinic-*.jar --spring.profiles.active=mysqlアプリケーションが動作しているかどうかは、http://&amp;lt;VM_IP_ADDRESS&amp;gt;:8083 にアクセスして確認することができます。 次に、トラフィックを生成し、クリックしまくり、エラーを生成し、ペットを追加するなどしてください。
-Dotel.service.name=$(hostname).service では、アプリケーションの名前を定義しています。サービスマップ上のアプリケーションの名前等に反映されます。 -Dotel.resource.attributes=deployment.environment=$(hostname),version=0.314 では、Environmentと、versionを定義しています。 deployment.environment=$(hostname) は、Splunk APM UIの上部「Environment」に反映されます。 version=0.</description></item><item><title>マニュアル計装</title><link>https://splunk.github.io/observability-workshop/v5.29/ja/other/pet-clinic/docs/manual_instrumentation/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.29/ja/other/pet-clinic/docs/manual_instrumentation/index.html</guid><description>1. 依存ライブラリを追加する 前のセクション足したような、プロセス全体に渡る属性は便利なのですが、ときにはさらに、リクエストの内容に応じた状況を知りたくなるかもしれません。 心配ありません、OpenTelemetryのAPIを通じてそれらを計装し、データを送り、Splunk Observabilityで分析できるようになります。
最初に、JavaアプリケーションがOpenTelemetryのAPIを使えるように、ライブラリの依存を追加していきます。 もちろん、vimなどのお好みのエディタをお使い頂いても大丈夫です！
アプリケーションが起動中であれば、一旦停止しましょう。ターミナルで Ctrl-c を押すと、停止することができます。
nano pom.xmlそして、&amp;lt;dependencies&amp;gt; セクションの中（33行目）に↓を追加してください。 ファイル修正後、 ctrl-O のあとに Enter で、ファイルを保存します。次に ctrl-X で、nanoを終了します。
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.opentelemetry&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;opentelemetry-api&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;念のため、コンパイルできるか確かめてみましょう:
./mvnw package -Dmaven.test.skip=true Tips: nanoの使い方と壊れたファイルの直し方 nanoはLinux環境でよく使われる、シンプルなエディタの一つです。
Alt-U で、アンドゥができます。Macの場合は Esc キーを押したあとに U を押してください！ ctrl-_ のあとに数字を入力すると、指定した行数にジャンプします。 ctrl-O のあとに Enter で、ファイルを保存します。 ctrl-X で、nanoを終了します。 もしファイルをどうしようもなく壊してしまって元に戻したい場合は、gitを使って次のようにするとよいでしょう。
git checkout pom.xml これで、JavaのアプリケーションでOpenTelemetryのAPIが使う準備ができました。
2. Javaのコードにマニュアル計装を追加する では、アプリケーションコードをちょっと変更して、リクエストのコンテキストのデータをスパン属性に追加してみましょう。
ここでは Pet Clinic アプリケーションの中で Find Owners が使われたときに、どのような検索文字列が指定されたのかを調査できるようにしていきます。 検索条件によってパフォーマンスが劣化してしまうケース、よくありませんか？そんなときは OwnerController に計装を追加していきましょう！
nano src/main/java/org/springframework/samples/petclinic/owner/OwnerController.javaこのコードを 変更するのは2箇所 です。
まず、import jakarta.validation.Valid; の下、37行目付近に↓を足します:
import io.</description></item><item><title>Real User Monitoring</title><link>https://splunk.github.io/observability-workshop/v5.29/ja/other/pet-clinic/docs/rum/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.29/ja/other/pet-clinic/docs/rum/index.html</guid><description>1. RUMを有効にする Real User Monitoring (RUM)計装のために、Open Telemetry Javascript https://github.com/signalfx/splunk-otel-js-web スニペットをページ内に追加します。再度ウィザードを使用します Data Management → Add Integrationボタン → Monitor user experience（画面上部タブ） → Browser Instrumentationを開きます。
ドロップダウンから設定済みの RUM ACCESS TOKEN を選択し、Next をクリックします。以下の構文で App name とEnvironment を入力します：
次に、ワークショップのRUMトークンを選択し、 App nameとEnvironmentを定義します。ウィザードでは、ページ上部の &amp;lt;head&amp;gt; セクションに配置する必要のある HTML コードの断片が表示されます。この例では、次のように記述していますが、ウィザードでは先程入力した値が反映されてるはずです。
Application Name: &amp;lt;hostname&amp;gt;-petclinic-service Environment: &amp;lt;hostname&amp;gt;-petclinic-env ウィザードで編集済みコードスニペットをコピーするか、以下のスニペットをコピーして適宜編集してください。ただし：
[hostname]-petclinic-service - [hostname] をお使いのホスト名に書き換えてください [hostname]-petclinic-env - [hostname] をお使いのホスト名に書き換えてください &amp;lt;script src=&amp;#34;https://cdn.signalfx.com/o11y-gdi-rum/latest/splunk-otel-web.js&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; SplunkRum.init({ beaconUrl: &amp;#34;https://rum-ingest.&amp;lt;REALM&amp;gt;.signalfx.com/v1/rum&amp;#34;, rumAuth: &amp;#34;&amp;lt;RUM_ACCESS_TOKEN&amp;gt;&amp;#34;, app: &amp;#34;&amp;lt;hostname&amp;gt;.service&amp;#34;, environment: &amp;#34;&amp;lt;hostname&amp;gt;&amp;#34; }); &amp;lt;/script&amp;gt;Spring PetClinicアプリケーションでは、1つのHTMLページを「レイアウト」ページとして使用し、アプリケーションのすべてのページで再利用しています。これは、Splunk RUM計装ライブラリを挿入するのに最適な場所であり、すべてのページで自動的に読み込まれます。</description></item><item><title>Log Observer</title><link>https://splunk.github.io/observability-workshop/v5.29/ja/other/pet-clinic/docs/logobserver/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.29/ja/other/pet-clinic/docs/logobserver/index.html</guid><description>このセクションでは、Spring PetClinicアプリケーションをファイルシステムのファイルにログを書き込むように設定し、 Splunk OpenTelemetry Collectorがそのログファイルを読み取り（tail）、Splunk Observability Platformに情報を報告するように設定していきます。
1. FluentDの設定 Splunk OpenTelemetry Collectorを、Spring PetClinicのログファイルをtailし Splunk Observability Cloudエンドポイントにデータを報告するように設定する必要があります。
Splunk OpenTelemetry Collectorは、FluentDを使用してログの取得/報告を行い、 Spring PetClinicのログを報告するための適切な設定を行うには、 デフォルトディレクトリ（/etc/otel/collector/fluentd/conf.d/）にFluentDの設定ファイルを追加するだけです。
以下は、サンプルのFluentD設定ファイル petclinic.conf を新たに作成し、
sudo nano /etc/otel/collector/fluentd/conf.d/petclinic.confファイル /tmp/spring-petclinic.logを読み取るよう設定を記述します。
&amp;lt;source&amp;gt; @type tail @label @SPLUNK tag petclinic.app path /tmp/spring-petclinic.log pos_file /tmp/spring-petclinic.pos_file read_from_head false &amp;lt;parse&amp;gt; @type none &amp;lt;/parse&amp;gt; &amp;lt;/source&amp;gt;このとき、ファイル petclinic.conf のアクセス権と所有権を変更する必要があります。
sudo chown td-agent:td-agent /etc/otel/collector/fluentd/conf.d/petclinic.conf sudo chmod 755 /etc/otel/collector/fluentd/conf.d/petclinic.confファイルが作成されたら、FluentDプロセスを再起動しましょう。
sudo systemctl restart td-agent3. Logbackの設定 Spring Pet Clinicアプリケーションは、いくつかのJavaログライブラリを使用することができます。 このシナリオでは、logbackを使ってみましょう。
リソースフォルダに logback.xml という名前のファイルを作成して…
nano src/main/resources/logback.</description></item></channel></rss>