<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenTelemetry Collector Extensions on Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.37/en/other/5-opentelemetry-collector/2-extensions/index.html</link><description>Recent content in OpenTelemetry Collector Extensions on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.37/en/other/5-opentelemetry-collector/2-extensions/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenTelemetry Collector Extensions</title><link>https://splunk.github.io/observability-workshop/v5.37/en/other/5-opentelemetry-collector/2-extensions/1-health/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.37/en/other/5-opentelemetry-collector/2-extensions/1-health/index.html</guid><description>Health Check Extensions are configured in the same config.yaml file that we referenced in the installation step. Let&amp;rsquo;s edit the config.yaml file and configure the extensions. Note that the pprof and zpages extensions are already configured in the default config.yaml file. For the purpose of this workshop, we will only be updating the health_check extension to expose the port on all network interfaces on which we can access the health of the collector.</description></item><item><title>OpenTelemetry Collector Extensions</title><link>https://splunk.github.io/observability-workshop/v5.37/en/other/5-opentelemetry-collector/2-extensions/2-performance/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.37/en/other/5-opentelemetry-collector/2-extensions/2-performance/index.html</guid><description>Performance Profiler Performance Profiler extension enables the golang net/http/pprof endpoint. This is typically used by developers to collect performance profiles and investigate issues with the service. We will not be covering this in this workshop.</description></item><item><title>OpenTelemetry Collector Extensions</title><link>https://splunk.github.io/observability-workshop/v5.37/en/other/5-opentelemetry-collector/2-extensions/3-zpages/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.37/en/other/5-opentelemetry-collector/2-extensions/3-zpages/index.html</guid><description>zPages zPages are an in-process alternative to external exporters. When included, they collect and aggregate tracing and metrics information in the background; this data is served on web pages when requested. zPages are an extremely useful diagnostic feature to ensure the collector is running as expected.
&amp;#8203; ServiceZ PipelineZ ExtensionZ ServiceZ gives an overview of the collector services and quick access to the pipelinez, extensionz, and featurez zPages. The page also provides build and runtime information.</description></item></channel></rss>