<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Workshop using the Java microservices Pet Clinic demo. (Kubernetes based). on Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/index.html</link><description>Recent content in Workshop using the Java microservices Pet Clinic demo. (Kubernetes based). on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/index.xml" rel="self" type="application/rss+xml"/><item><title>Preparation of the Pet Clinic application.</title><link>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/10-preparation/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/10-preparation/index.html</guid><description>1. Deploying the prebuilt containers into Kubernetes The first thing we need to set up is &amp;hellip; well, an application. The first deployment of our application will be using prebuilt containers to give us the base scenario: a Java microservices-based application running in Kubernetes.
So let&amp;rsquo;s deploy our application: &amp;#8203; kubectl apply kubectl apply Output kubectl apply -f ~/workshop/petclinic/petclinic-deploy.yaml deployment.apps/config-server created service/config-server created deployment.apps/discovery-server created service/discovery-server created deployment.apps/api-gateway created service/api-gateway created service/api-gateway-external created deployment.</description></item><item><title>Installing the OpenTelemetry Collector</title><link>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/20-otel-collector/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/20-otel-collector/index.html</guid><description>1. Introduction The Splunk OpenTelemetry Collector is the core component of instrumenting infrastructure and applications. Its role is to collect and send:
Infrastructure metrics (disk, CPU, memory, etc) Application Performance Monitoring (APM) traces Profiling data Host and application logs Splunk Observability Cloud offers a wizard to walk you through the setup of the Collector on both your infrastructure and applications.
Delete any existing OpenTelemetry Collectors If you have completed a Splunk Observability workshop using this EC2 instance, please ensure you have deleted the collector running in Kubernetes before continuing.</description></item><item><title>Setting up Auto instrumentation for APM</title><link>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/30-auto-instrumentation/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/30-auto-instrumentation/index.html</guid><description>1. setting up the Java auto instrumentation Patch all the deployments (labeled with app.kubernetes.io/part-of=spring-petclinic) to add the inject annotation. This automatically causes pods to restart.
kubectl get deployments -l app.kubernetes.io/part-of=spring-petclinic -o name | xargs -I % kubectl patch % -p &amp;#34;{\&amp;#34;spec\&amp;#34;: {\&amp;#34;template\&amp;#34;:{\&amp;#34;metadata\&amp;#34;:{\&amp;#34;annotations\&amp;#34;:{\&amp;#34;instrumentation.</description></item><item><title>Real User Monitoring</title><link>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/50-rum/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/50-rum/index.html</guid><description>1. Enable RUM For the Real User Monitoring (RUM) instrumentation, we will add the Open Telemetry Javascript https://github.com/signalfx/splunk-otel-js-web snippet in the pages, we will use the wizard again Data Management → Add Integration → RUM Instrumentation → Browser Instrumentation.
Your instructor will inform you which token to use from the dropdown, click Next. Enter App name and Environment using the following syntax:
&amp;lt;INSTANCE&amp;gt;-petclinic-service - replacing &amp;lt;INSTANCE&amp;gt; with the value you noted down earlier.</description></item><item><title>Log Observer</title><link>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/60-log-observer-connect/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/3-java-microservices-pet-clinic/60-log-observer-connect/index.html</guid><description>1. Introduction For the Splunk Log Observer component, we will configure the Spring PetClinic application to write logs to a file and configure the Splunk OpenTelemetry Collector to read (tail) that log file and send the logs to Splunk Cloud.
2. OpenTelemetry Filelog Configuration We need to configure the Splunk OpenTelemetry Collector to tail the Spring PetClinic log file and send the log data to Splunk Cloud.
The Splunk OpenTelemetry Collector uses Fluentd by default but we will change the configuration to use the OpenTelemetry Filelog Receiver to consume the logs.</description></item></channel></rss>