<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NodeJS Zero-Config Workshop on Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/2-nodejs/index.html</link><description>Recent content in NodeJS Zero-Config Workshop on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/2-nodejs/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploying the OpenTelemetry Demo</title><link>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/2-nodejs/1-otel-demo/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/2-nodejs/1-otel-demo/index.html</guid><description>1. Create a namespace To not conflict with other workshops, we will deploy the OpenTelemetry Demo in a separate namespace called otel-demo. To create the namespace, run the following command:
kubectl create namespace otel-demo2. Deploy the OpenTelemetry Demo Next, change to the directory containing the OpenTelemetry Demo application:
cd ~/workshop/apmDeploy the OpenTelemetry Demo application:
&amp;#8203; Command Output kubectl apply -n otel-demo -f otel-demo.yaml serviceaccount/opentelemetry-demo created service/opentelemetry-demo-adservice created service/opentelemetry-demo-cartservice created service/opentelemetry-demo-checkoutservice created service/opentelemetry-demo-currencyservice created service/opentelemetry-demo-emailservice created service/opentelemetry-demo-featureflagservice created service/opentelemetry-demo-ffspostgres created service/opentelemetry-demo-frontend created service/opentelemetry-demo-kafka created service/opentelemetry-demo-loadgenerator created service/opentelemetry-demo-paymentservice created service/opentelemetry-demo-productcatalogservice created service/opentelemetry-demo-quoteservice created service/opentelemetry-demo-recommendationservice created service/opentelemetry-demo-redis created service/opentelemetry-demo-shippingservice created deployment.</description></item><item><title>Installing the OpenTelemetry Collector</title><link>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/2-nodejs/2-otel-collector/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/2-nodejs/2-otel-collector/index.html</guid><description>1. Introduction Delete any existing OpenTelemetry Collectors If you have completed any other Observability workshops, please ensure you delete the collector running in Kubernetes before continuing. This can be done by running the following command:
helm delete splunk-otel-collector 2. Confirm environment variables To ensure your instance is configured correctly, we need to confirm that the required environment variables for this workshop are set correctly. In your terminal run the following command:</description></item><item><title>Zero Configuration - Frontend Service</title><link>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/2-nodejs/3-frontend-service/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/2-nodejs/3-frontend-service/index.html</guid><description>1. Patching the Frontend service First, confirm that you can see your environment in APM. There should be a service called loadgenerator displayed in the Service map.
Next, we will patch the frontend deployment with an annotation to inject the NodeJS auto instrumentation. This will allow us to see the frontend service in APM. Note, that at this point we have not edited any code.
kubectl patch deployment opentelemetry-demo-frontend -n otel-demo -p &amp;#39;{&amp;#34;spec&amp;#34;: {&amp;#34;template&amp;#34;:{&amp;#34;metadata&amp;#34;:{&amp;#34;annotations&amp;#34;:{&amp;#34;instrumentation.</description></item><item><title>Zero Configuration - Payment Service</title><link>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/2-nodejs/4-payment-service/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/2-nodejs/4-payment-service/index.html</guid><description>1. Patching the Payment Service Finally, we will patch the paymentservice deployment with an annotation to inject the NodeJS auto instrumentation. This will allow us to see the paymentservice service in APM.
kubectl patch deployment opentelemetry-demo-paymentservice -n otel-demo -p &amp;#39;{&amp;#34;spec&amp;#34;: {&amp;#34;template&amp;#34;:{&amp;#34;metadata&amp;#34;:{&amp;#34;annotations&amp;#34;:{&amp;#34;instrumentation.opentelemetry.io/inject-nodejs&amp;#34;:&amp;#34;default/splunk-otel-collector&amp;#34;}}}} }&amp;#39;This will cause the opentelemetry-demo-paymentservice pod to restart and after a few minutes, you should see the paymentservice service in APM.</description></item><item><title>Code Profiling - Payment Service</title><link>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/2-nodejs/5-profiling/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/2-nodejs/5-profiling/index.html</guid><description>1. AlwaysOn Profiling for the Payment Service AlwaysOn Profiling is a feature of the Splunk Distribution of OpenTelemetry Collector that allows you to collect CPU and Memory profiling data for your services without having to modify your code. This is useful for troubleshooting performance issues in your services. Here are some of the benefits of AlwaysOn Profiling:
Perform continuous profiling of your applications. The profiler is always on once you activate it.</description></item><item><title>Logs - Payment Service</title><link>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/2-nodejs/6-logs/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.37/en/other/3-auto-instrumentation/2-nodejs/6-logs/index.html</guid><description>1. Viewing the logs for the Payment Service Navigate back to APM from the main menu and under Services click on opentelemetry-demo-paymentservice. This will open up the Service map for the paymentservice service only.
At the bottom of the page, click on the Logs(1) tab to view the logs for the paymentservice service.
Once in Log Observer select one of the log entries to view the metadata for the log entry.</description></item></channel></rss>