<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Debug Problems on Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.40/en/scenarios/2-debug-problems/index.html</link><description>Recent content in Debug Problems on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://splunk.github.io/observability-workshop/v5.40/en/scenarios/2-debug-problems/index.xml" rel="self" type="application/rss+xml"/><item><title>Build the Sample Application</title><link>https://splunk.github.io/observability-workshop/v5.40/en/scenarios/2-debug-problems/1-build-application/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.40/en/scenarios/2-debug-problems/1-build-application/index.html</guid><description>10 minutes Introduction For this workshop, we&amp;rsquo;ll be using a Java-based application called The Door Game. It will be hosted in Kubernetes.
Pre-requisites You will start with an EC2 instance and perform some initial steps in order to get to the following state:
Install Kubernetes (k3s) and Docker Deploy the Splunk distribution of the OpenTelemetry Collector Deploy the MySQL database container and populate data Build and deploy the doorgame application container Initial Steps The initial setup can be completed by executing the following steps on the command line of your EC2 instance.</description></item><item><title>Troubleshoot Game Startup</title><link>https://splunk.github.io/observability-workshop/v5.40/en/scenarios/2-debug-problems/2-troubleshoot-game-startup/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.40/en/scenarios/2-debug-problems/2-troubleshoot-game-startup/index.html</guid><description>10 minutes Let&amp;rsquo;s use Splunk Observability Cloud to determine why the game started so slowly.
View your application in Splunk Observability Cloud Note: when the application is deployed for the first time, it may take a few minutes for the data to appear.
Navigate to APM, then use the Environment dropdown to select your environment (i.e. profiling-workshop-name).
If everything was deployed correctly, you should see doorgame displayed in the list of services:</description></item><item><title>Enable AlwaysOn Profiling</title><link>https://splunk.github.io/observability-workshop/v5.40/en/scenarios/2-debug-problems/3-enable-profiling/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.40/en/scenarios/2-debug-problems/3-enable-profiling/index.html</guid><description>20 minutes Let&amp;rsquo;s learn how to enable the memory and CPU profilers, verify their operation, and use the results in Splunk Observability Cloud to find out why our application startup is slow.
Update the application configuration We will need to pass additional configuration arguments to the Splunk OpenTelemetry Java agent in order to enable both profilers. The configuration is documented here in detail, but for now we just need the following settings:</description></item><item><title>Fix Application Startup Slowness</title><link>https://splunk.github.io/observability-workshop/v5.40/en/scenarios/2-debug-problems/4-fix-app-startup-slowness/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.40/en/scenarios/2-debug-problems/4-fix-app-startup-slowness/index.html</guid><description>10 minutes In this section, we&amp;rsquo;ll use what we learned from the profiling data in Splunk Observability Cloud to resolve the slowness we saw when starting our application.
Examining the Source Code Open the corresponding source file once again (./doorgame/src/main/java/com/splunk/profiling/workshop/UserData.java) and focus on the following code:
public class UserData { static final String DB_URL = &amp;#34;jdbc:mysql://mysql/DoorGameDB&amp;#34;; static final String USER = &amp;#34;root&amp;#34;; static final String PASS = System.getenv(&amp;#34;MYSQL_ROOT_PASSWORD&amp;#34;); static final String SELECT_QUERY = &amp;#34;select * FROM DoorGameDB.</description></item><item><title>Fix In Game Slowness</title><link>https://splunk.github.io/observability-workshop/v5.40/en/scenarios/2-debug-problems/5-fix-ingame-slowness/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.40/en/scenarios/2-debug-problems/5-fix-ingame-slowness/index.html</guid><description>10 minutes Now that our game startup slowness has been resolved, let&amp;rsquo;s play several rounds of the Door Game and ensure the rest of the game performs quickly.
As you play the game, do you notice any slowness? Let&amp;rsquo;s look at the data in Splunk Observability Cloud to put some numbers on what we&amp;rsquo;re seeing.
Review Game Performance in Splunk Observability Cloud Navigate to APM then click on Traces on the right-hand side of the screen.</description></item><item><title>Summary</title><link>https://splunk.github.io/observability-workshop/v5.40/en/scenarios/2-debug-problems/6-summary/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.40/en/scenarios/2-debug-problems/6-summary/index.html</guid><description>3 minutes In this workshop, we accomplished the following:
We deployed our application and captured traces with Splunk Observability Cloud. We used Database Query Performance to find a slow-running query that impacted the game startup time. We enabled AlwaysOn Profiling and used it to confirm which line of code was causing the increased startup time and memory usage. We found another application performance issue and used AlwaysOn Profiling again to find the problematic line of code.</description></item></channel></rss>