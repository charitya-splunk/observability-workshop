<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ninja Workshops on Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v5.40/ja/other/index.html</link><description>Recent content in Ninja Workshops on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><language>ja</language><atom:link href="https://splunk.github.io/observability-workshop/v5.40/ja/other/index.xml" rel="self" type="application/rss+xml"/><item><title>Pet Clinic Java ワークショップ</title><link>https://splunk.github.io/observability-workshop/v5.40/ja/other/pet-clinic/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.40/ja/other/pet-clinic/index.html</guid><description>このワークショップでは、Splunk Observabilityプラットフォームの以下のコンポーネントを構成するための、基本的なステップを体験できます：
Splunk Infrastructure Monitoring (IM) Splunk APM Endpoint Performance Database Query Performance AlwaysOn Profiling Splunk Real User Monitoring (RUM) Splunk LogObserver ワークショップの中では、Javaのサンプルアプリケーション（Spring Pet Clinic）をクローン（ダウンロード）し、アプリケーションのコンパイル、パッケージ、実行していきます。
アプリケーションを起動すると、OpenTelemetry Javaエージェントを通じて、Splunk APMでメトリクスとトレースが即座に表示されるようになります。
その後、Splunk OpenTelemetry Javascript Libraries (RUM)を使用して、Pet Clinicのエンドユーザーインターフェース（アプリケーションによってレンダリングされるHTMLページ）を計装し、エンドユーザーが実行する個々のクリックとページロードのすべてについて、RUMトレースを生成していきます。
前提条件 このワークショップは、ホスト/インスタンスが提供されるSplunk実行ワークショップ または 自前のホスト/Multipassインスタンス で行う、自己主導型のワークショップです。
ご自身のシステムには、以下のものがインストールされ、有効になっている必要があります：
JDK 17 ポート 8083 が開いていること（インバウンド/アウトバウンド）</description></item><item><title>OpenTelemetryでクラウドネイティブ環境のオブザーバビリティを実現する</title><link>https://splunk.github.io/observability-workshop/v5.40/ja/other/opentelemetry-collector/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v5.40/ja/other/opentelemetry-collector/index.html</guid><description>概要 OpenTelemetry を使い始める場合は、バックエンドに直接データを送ることから始めるかもしれません。最初のステップとしてはよいですが、OpenTelemetry Collector をオブザーバビリティのアーキテクチャとして使用するのは多くの利点があり、本番環境では Collector を使ったデプロイを推奨しています。
このワークショップでは、OpenTelemetry Collector を使用することに焦点を当て、Splunk Observability Cloud で使用するためのレシーバー、プロセッサー、エクスポーターを定義し、実際にテレメトリデータを送信するためのパイプラインを設定することで、環境に合わせて Collector を活用を学びます。また、分散プラットフォームのビジネスニーズに対応するための、カスタムコンポーネントを追加できるようになるまでの道のりを進むことになります。
Ninja セクション ワークショップの途中には、展開できる Ninja セクション があります。これらはより実践的で、ワークショップ中、もしくは自分の時間を使って、さらに技術的な詳細に取り組むことができます。
OpenTelemetry プロジェクトは頻繁に開発されているため、Ninjaセクションの内容が古くなる可能性があることに注意してください。コンテンツが古い場合には更新のリクエストを出すこともできますので、必要なものを見つけた場合はお知らせください。
Ninja: をテストして！ このワークショップを完了すると、正式に OpenTelemetry Collector ニンジャになります！
対象者 このワークショップは、OpenTelemetry Collector のアーキテクチャとデプロイメントについてさらに学びたいと考えている開発者やシステム管理者を対象としています。
前提条件 データ収集に関する基本的な理解 コマンドラインとvim/viの経験 Ubuntu 20.04 LTSまたは22.04 LTSが稼働するインスタンス/ホスト/VM 最小要件はAWS/EC2 t2.micro（1 CPU、1GB RAM、8GBストレージ） 学習目標 このセッションの終わりまでに、参加者は以下を行うことができるようになります：
OpenTelemetry のコンポーネントを理解する レシーバー、プロセッサー、エクスポーターを使用してデータを収集・分析する OpenTelemetry を使用する利点を特定する 自分たちのビジネスニーズに対応するカスタムコンポーネントを構築する OpenTelemetry のアーキテクチャー %%{ init:{ &amp;#34;theme&amp;#34;:&amp;#34;base&amp;#34;, &amp;#34;themeVariables&amp;#34;: { &amp;#34;primaryColor&amp;#34;: &amp;#34;#ffffff&amp;#34;, &amp;#34;clusterBkg&amp;#34;: &amp;#34;#eff2fb&amp;#34;, &amp;#34;defaultLinkColor&amp;#34;: &amp;#34;#333333&amp;#34; } } }%% flowchart LR; subgraph Receivers A[OTLP] --&amp;gt; M(Receivers) B[JAEGER] --&amp;gt; M(Receivers) C[Prometheus] --&amp;gt; M(Receivers) end subgraph Processors M(Receivers) --&amp;gt; H(Filters, Attributes, etc) E(Extensions) end subgraph Exporters H(Filters, Attributes, etc) --&amp;gt; S(OTLP) H(Filters, Attributes, etc) --&amp;gt; T(JAEGER) H(Filters, Attributes, etc) --&amp;gt; U(Prometheus) end</description></item></channel></rss>